-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_adder is
port (
    ap_ready : OUT STD_LOGIC;
    sumx : IN STD_LOGIC_VECTOR (7 downto 0);
    sumy : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of sobel_adder is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal zext_ln33_1_fu_22_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln33_fu_18_p1 : STD_LOGIC_VECTOR (8 downto 0);


begin



    ap_ready <= ap_const_logic_1;
    ap_return <= std_logic_vector(unsigned(zext_ln33_1_fu_22_p1) + unsigned(zext_ln33_fu_18_p1));
    zext_ln33_1_fu_22_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sumy),9));
    zext_ln33_fu_18_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sumx),9));
end behav;
