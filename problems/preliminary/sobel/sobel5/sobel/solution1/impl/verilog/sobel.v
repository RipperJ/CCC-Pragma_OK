// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel_sobel,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.965375,HLS_SYN_LAT=461522,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=619,HLS_SYN_LUT=1086,HLS_VERSION=2020_2}" *)

module sobel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_address0,
        src_ce0,
        src_q0,
        src_address1,
        src_ce1,
        src_q1,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        dst_address1,
        dst_ce1,
        dst_we1,
        dst_d1,
        rows,
        cols
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [19:0] src_address0;
output   src_ce0;
input  [15:0] src_q0;
output  [19:0] src_address1;
output   src_ce1;
input  [15:0] src_q1;
output  [19:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [15:0] dst_d0;
output  [19:0] dst_address1;
output   dst_ce1;
output   dst_we1;
output  [15:0] dst_d1;
input  [31:0] rows;
input  [31:0] cols;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_ce0;
reg src_ce1;
reg dst_ce0;
reg dst_we0;
reg dst_ce1;
reg dst_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln72_fu_573_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [9:0] add_ln7223_reg_277;
reg   [0:0] icmp_ln7322_reg_291;
reg   [0:0] cmp7021_reg_305;
reg   [9:0] col20_reg_319;
reg   [9:0] row19_reg_333;
reg   [18:0] indvar_flatten18_reg_347;
wire   [18:0] add_ln72_1_fu_407_p2;
reg   [18:0] add_ln72_1_reg_976;
wire   [9:0] select_ln73_fu_413_p3;
reg   [9:0] select_ln73_reg_981;
reg   [9:0] select_ln73_reg_981_pp0_iter1_reg;
reg   [9:0] select_ln73_reg_981_pp0_iter2_reg;
wire   [9:0] row_fu_421_p3;
reg   [9:0] row_reg_986;
reg   [9:0] buffer_a_1_addr_reg_1006;
reg   [9:0] buffer_b_1_addr_reg_1011;
reg   [9:0] buffer_a_2_addr_reg_1016;
reg   [9:0] buffer_b_2_addr_reg_1022;
wire   [0:0] and_ln99_fu_533_p2;
reg   [0:0] and_ln99_reg_1028;
reg   [0:0] and_ln99_reg_1028_pp0_iter1_reg;
reg   [0:0] and_ln99_reg_1028_pp0_iter2_reg;
wire   [9:0] col_fu_539_p2;
reg   [9:0] col_reg_1032;
wire   [0:0] icmp_fu_555_p2;
reg   [0:0] icmp_reg_1037;
wire   [0:0] icmp_ln73_fu_561_p2;
reg   [0:0] icmp_ln73_reg_1042;
wire   [9:0] add_ln72_fu_567_p2;
reg   [9:0] add_ln72_reg_1047;
reg   [0:0] icmp_ln72_reg_1052;
reg   [0:0] icmp_ln72_reg_1052_pp0_iter1_reg;
reg   [0:0] icmp_ln72_reg_1052_pp0_iter2_reg;
reg   [15:0] pin_a_reg_1056;
reg    ap_enable_reg_pp0_iter1;
reg   [15:0] pin_b_reg_1063;
wire   [14:0] trunc_ln82_fu_579_p1;
reg   [14:0] trunc_ln82_reg_1070;
wire   [14:0] trunc_ln83_fu_583_p1;
reg   [14:0] trunc_ln83_reg_1076;
wire   [8:0] temp_a_adder_fu_381_ap_return;
reg   [8:0] temp_a_reg_1082;
wire   [8:0] temp_b_adder_fu_389_ap_return;
reg   [8:0] temp_b_reg_1087;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    buffer_a_1_ce0;
reg    buffer_a_1_we0;
wire   [15:0] buffer_a_1_q0;
reg    buffer_a_2_ce0;
reg    buffer_a_2_we0;
wire   [9:0] buffer_a_2_address1;
reg    buffer_a_2_ce1;
wire   [15:0] buffer_a_2_q1;
reg    buffer_b_1_ce0;
reg    buffer_b_1_we0;
wire   [15:0] buffer_b_1_q0;
reg    buffer_b_2_ce0;
reg    buffer_b_2_we0;
wire   [9:0] buffer_b_2_address1;
reg    buffer_b_2_ce1;
wire   [15:0] buffer_b_2_q1;
wire    sumx_a_1_crop_fu_361_ap_ready;
wire   [15:0] sumx_a_1_crop_fu_361_in_r;
wire   [7:0] sumx_a_1_crop_fu_361_ap_return;
wire    sumy_a_1_crop_fu_366_ap_ready;
wire   [15:0] sumy_a_1_crop_fu_366_in_r;
wire   [7:0] sumy_a_1_crop_fu_366_ap_return;
wire    sumx_b_1_crop_fu_371_ap_ready;
wire   [15:0] sumx_b_1_crop_fu_371_in_r;
wire   [7:0] sumx_b_1_crop_fu_371_ap_return;
wire    sumy_b_1_crop_fu_376_ap_ready;
wire   [15:0] sumy_b_1_crop_fu_376_in_r;
wire   [7:0] sumy_b_1_crop_fu_376_ap_return;
wire    temp_a_adder_fu_381_ap_ready;
wire    temp_b_adder_fu_389_ap_ready;
wire    pout_a_crop_upper_fu_397_ap_ready;
wire   [8:0] pout_a_crop_upper_fu_397_ap_return;
wire    pout_b_crop_upper_fu_402_ap_ready;
wire   [8:0] pout_b_crop_upper_fu_402_ap_return;
wire    ap_block_pp0_stage0;
reg   [9:0] ap_phi_mux_add_ln7223_phi_fu_281_p6;
reg   [0:0] ap_phi_mux_icmp_ln7322_phi_fu_295_p6;
reg   [0:0] ap_phi_mux_cmp7021_phi_fu_309_p6;
reg   [9:0] ap_phi_mux_col20_phi_fu_323_p6;
reg   [9:0] ap_phi_mux_row19_phi_fu_337_p6;
reg   [18:0] ap_phi_mux_indvar_flatten18_phi_fu_351_p6;
wire   [63:0] zext_ln76_fu_501_p1;
wire   [63:0] zext_ln78_fu_512_p1;
wire   [63:0] zext_ln73_1_fu_473_p1;
wire   [63:0] zext_ln101_fu_869_p1;
wire   [63:0] add_ln101_cast_fu_880_p1;
reg   [15:0] pin_b_1_fu_90;
reg   [15:0] pin_a_1_fu_94;
reg   [15:0] pin_b_2_fu_98;
reg   [15:0] pin_a_2_fu_102;
reg   [14:0] empty_fu_106;
reg   [14:0] empty_11_fu_110;
reg   [14:0] empty_12_fu_114;
reg   [14:0] empty_13_fu_118;
reg   [15:0] empty_14_fu_122;
reg   [15:0] empty_15_fu_126;
reg   [15:0] empty_16_fu_130;
reg   [15:0] empty_17_fu_134;
wire   [8:0] tmp_1_fu_449_p4;
wire   [0:0] icmp39_fu_459_p2;
wire   [17:0] p_shl13_mid2_fu_441_p3;
wire   [17:0] zext_ln73_3_fu_481_p1;
wire   [17:0] add_ln75_1_fu_485_p2;
wire   [19:0] zext_ln75_fu_491_p1;
wire   [19:0] p_shl_mid2_fu_433_p3;
wire   [19:0] add_ln75_fu_495_p2;
wire   [19:0] add_ln77_fu_506_p2;
wire   [8:0] tmp_2_fu_517_p4;
wire   [0:0] select_ln73_2_fu_465_p3;
wire   [0:0] icmp_ln99_fu_527_p2;
wire   [8:0] tmp_3_fu_545_p4;
wire   [14:0] tmp20_fu_679_p2;
wire   [15:0] add_ln105_fu_692_p2;
wire   [15:0] sub_ln105_fu_698_p2;
wire   [15:0] tmp_fu_684_p3;
wire   [15:0] add_ln105_1_fu_703_p2;
wire   [14:0] trunc_ln73_1_fu_720_p1;
wire   [14:0] trunc_ln73_fu_716_p1;
wire   [14:0] tmp3918_fu_724_p2;
wire   [15:0] tmp1_fu_730_p3;
wire   [15:0] add_ln106_fu_738_p2;
wire   [15:0] sub_ln106_fu_744_p2;
wire   [15:0] add_ln106_1_fu_750_p2;
wire   [14:0] tmp4616_fu_762_p2;
wire   [15:0] add_ln119_fu_775_p2;
wire   [15:0] sub_ln119_fu_781_p2;
wire   [15:0] tmp2_fu_767_p3;
wire   [15:0] add_ln119_1_fu_786_p2;
wire   [14:0] trunc_ln73_3_fu_803_p1;
wire   [14:0] trunc_ln73_2_fu_799_p1;
wire   [14:0] tmp5214_fu_807_p2;
wire   [15:0] tmp3_fu_813_p3;
wire   [15:0] add_ln120_fu_821_p2;
wire   [15:0] sub_ln120_fu_827_p2;
wire   [15:0] add_ln120_1_fu_833_p2;
wire   [12:0] zext_ln73_2_fu_845_p1;
wire   [12:0] add_ln100_2_fu_848_p2;
wire  signed [19:0] sext_ln100_fu_854_p1;
wire   [19:0] grp_fu_897_p2;
(* use_dsp48 = "no" *) wire   [19:0] add_ln100_fu_858_p2;
wire   [19:0] add_ln100_1_fu_863_p2;
wire   [19:0] add_ln101_fu_874_p2;
wire   [9:0] grp_fu_897_p0;
wire   [11:0] grp_fu_897_p1;
reg    grp_fu_897_ce;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [19:0] grp_fu_897_p00;
reg    ap_condition_238;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

sobel_buffer_a_1 #(
    .DataWidth( 16 ),
    .AddressRange( 641 ),
    .AddressWidth( 10 ))
buffer_a_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_a_1_addr_reg_1006),
    .ce0(buffer_a_1_ce0),
    .we0(buffer_a_1_we0),
    .d0(buffer_a_2_q1),
    .q0(buffer_a_1_q0)
);

sobel_buffer_a_2 #(
    .DataWidth( 16 ),
    .AddressRange( 641 ),
    .AddressWidth( 10 ))
buffer_a_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_a_2_addr_reg_1016),
    .ce0(buffer_a_2_ce0),
    .we0(buffer_a_2_we0),
    .d0(src_q1),
    .address1(buffer_a_2_address1),
    .ce1(buffer_a_2_ce1),
    .q1(buffer_a_2_q1)
);

sobel_buffer_a_1 #(
    .DataWidth( 16 ),
    .AddressRange( 641 ),
    .AddressWidth( 10 ))
buffer_b_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_b_1_addr_reg_1011),
    .ce0(buffer_b_1_ce0),
    .we0(buffer_b_1_we0),
    .d0(buffer_b_2_q1),
    .q0(buffer_b_1_q0)
);

sobel_buffer_a_2 #(
    .DataWidth( 16 ),
    .AddressRange( 641 ),
    .AddressWidth( 10 ))
buffer_b_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_b_2_addr_reg_1022),
    .ce0(buffer_b_2_ce0),
    .we0(buffer_b_2_we0),
    .d0(src_q0),
    .address1(buffer_b_2_address1),
    .ce1(buffer_b_2_ce1),
    .q1(buffer_b_2_q1)
);

sobel_crop sumx_a_1_crop_fu_361(
    .ap_ready(sumx_a_1_crop_fu_361_ap_ready),
    .in_r(sumx_a_1_crop_fu_361_in_r),
    .ap_return(sumx_a_1_crop_fu_361_ap_return)
);

sobel_crop sumy_a_1_crop_fu_366(
    .ap_ready(sumy_a_1_crop_fu_366_ap_ready),
    .in_r(sumy_a_1_crop_fu_366_in_r),
    .ap_return(sumy_a_1_crop_fu_366_ap_return)
);

sobel_crop sumx_b_1_crop_fu_371(
    .ap_ready(sumx_b_1_crop_fu_371_ap_ready),
    .in_r(sumx_b_1_crop_fu_371_in_r),
    .ap_return(sumx_b_1_crop_fu_371_ap_return)
);

sobel_crop sumy_b_1_crop_fu_376(
    .ap_ready(sumy_b_1_crop_fu_376_ap_ready),
    .in_r(sumy_b_1_crop_fu_376_in_r),
    .ap_return(sumy_b_1_crop_fu_376_ap_return)
);

sobel_adder temp_a_adder_fu_381(
    .ap_ready(temp_a_adder_fu_381_ap_ready),
    .sumx(sumx_a_1_crop_fu_361_ap_return),
    .sumy(sumy_a_1_crop_fu_366_ap_return),
    .ap_return(temp_a_adder_fu_381_ap_return)
);

sobel_adder temp_b_adder_fu_389(
    .ap_ready(temp_b_adder_fu_389_ap_ready),
    .sumx(sumx_b_1_crop_fu_371_ap_return),
    .sumy(sumy_b_1_crop_fu_376_ap_return),
    .ap_return(temp_b_adder_fu_389_ap_return)
);

sobel_crop_upper pout_a_crop_upper_fu_397(
    .ap_ready(pout_a_crop_upper_fu_397_ap_ready),
    .in_r(temp_a_reg_1082),
    .ap_return(pout_a_crop_upper_fu_397_ap_return)
);

sobel_crop_upper pout_b_crop_upper_fu_402(
    .ap_ready(pout_b_crop_upper_fu_402_ap_ready),
    .in_r(temp_b_reg_1087),
    .ap_return(pout_b_crop_upper_fu_402_ap_return)
);

sobel_mul_mul_10ns_12ns_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
mul_mul_10ns_12ns_20_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_897_p0),
    .din1(grp_fu_897_p1),
    .ce(grp_fu_897_ce),
    .dout(grp_fu_897_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln72_reg_1052 == 1'd0))) begin
        add_ln7223_reg_277 <= add_ln72_reg_1047;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln72_reg_1052 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        add_ln7223_reg_277 <= 10'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln72_reg_1052 == 1'd0))) begin
        cmp7021_reg_305 <= icmp_reg_1037;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln72_reg_1052 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        cmp7021_reg_305 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln72_reg_1052 == 1'd0))) begin
        col20_reg_319 <= col_reg_1032;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln72_reg_1052 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        col20_reg_319 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln72_reg_1052 == 1'd0))) begin
        icmp_ln7322_reg_291 <= icmp_ln73_reg_1042;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln72_reg_1052 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        icmp_ln7322_reg_291 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln72_reg_1052 == 1'd0))) begin
        indvar_flatten18_reg_347 <= add_ln72_1_reg_976;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln72_reg_1052 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        indvar_flatten18_reg_347 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln72_reg_1052 == 1'd0))) begin
        row19_reg_333 <= row_reg_986;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln72_reg_1052 == 1'd1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        row19_reg_333 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln72_1_reg_976 <= add_ln72_1_fu_407_p2;
        add_ln72_reg_1047 <= add_ln72_fu_567_p2;
        col_reg_1032 <= col_fu_539_p2;
        icmp_ln73_reg_1042 <= icmp_ln73_fu_561_p2;
        icmp_reg_1037 <= icmp_fu_555_p2;
        row_reg_986 <= row_fu_421_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln99_reg_1028 <= and_ln99_fu_533_p2;
        and_ln99_reg_1028_pp0_iter1_reg <= and_ln99_reg_1028;
        buffer_a_1_addr_reg_1006 <= zext_ln73_1_fu_473_p1;
        buffer_a_2_addr_reg_1016 <= zext_ln73_1_fu_473_p1;
        buffer_b_1_addr_reg_1011 <= zext_ln73_1_fu_473_p1;
        buffer_b_2_addr_reg_1022 <= zext_ln73_1_fu_473_p1;
        icmp_ln72_reg_1052 <= icmp_ln72_fu_573_p2;
        icmp_ln72_reg_1052_pp0_iter1_reg <= icmp_ln72_reg_1052;
        select_ln73_reg_981 <= select_ln73_fu_413_p3;
        select_ln73_reg_981_pp0_iter1_reg <= select_ln73_reg_981;
        trunc_ln82_reg_1070 <= trunc_ln82_fu_579_p1;
        trunc_ln83_reg_1076 <= trunc_ln83_fu_583_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln99_reg_1028_pp0_iter2_reg <= and_ln99_reg_1028_pp0_iter1_reg;
        icmp_ln72_reg_1052_pp0_iter2_reg <= icmp_ln72_reg_1052_pp0_iter1_reg;
        select_ln73_reg_981_pp0_iter2_reg <= select_ln73_reg_981_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        empty_11_fu_110 <= trunc_ln82_reg_1070;
        empty_12_fu_114 <= empty_fu_106;
        empty_13_fu_118 <= empty_11_fu_110;
        empty_14_fu_122 <= buffer_b_1_q0;
        empty_15_fu_126 <= buffer_a_1_q0;
        empty_16_fu_130 <= empty_14_fu_122;
        empty_17_fu_134 <= empty_15_fu_126;
        empty_fu_106 <= trunc_ln83_reg_1076;
        pin_a_1_fu_94 <= pin_a_reg_1056;
        pin_a_2_fu_102 <= pin_a_1_fu_94;
        pin_b_1_fu_90 <= pin_b_reg_1063;
        pin_b_2_fu_98 <= pin_b_1_fu_90;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        pin_a_reg_1056 <= src_q1;
        pin_b_reg_1063 <= src_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln99_reg_1028_pp0_iter1_reg))) begin
        temp_a_reg_1082 <= temp_a_adder_fu_381_ap_return;
        temp_b_reg_1087 <= temp_b_adder_fu_389_ap_return;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln72_reg_1052_pp0_iter2_reg == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_238)) begin
        if ((icmp_ln72_reg_1052 == 1'd1)) begin
            ap_phi_mux_add_ln7223_phi_fu_281_p6 = 10'd1;
        end else if ((icmp_ln72_reg_1052 == 1'd0)) begin
            ap_phi_mux_add_ln7223_phi_fu_281_p6 = add_ln72_reg_1047;
        end else begin
            ap_phi_mux_add_ln7223_phi_fu_281_p6 = add_ln7223_reg_277;
        end
    end else begin
        ap_phi_mux_add_ln7223_phi_fu_281_p6 = add_ln7223_reg_277;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_238)) begin
        if ((icmp_ln72_reg_1052 == 1'd1)) begin
            ap_phi_mux_cmp7021_phi_fu_309_p6 = 1'd0;
        end else if ((icmp_ln72_reg_1052 == 1'd0)) begin
            ap_phi_mux_cmp7021_phi_fu_309_p6 = icmp_reg_1037;
        end else begin
            ap_phi_mux_cmp7021_phi_fu_309_p6 = cmp7021_reg_305;
        end
    end else begin
        ap_phi_mux_cmp7021_phi_fu_309_p6 = cmp7021_reg_305;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_238)) begin
        if ((icmp_ln72_reg_1052 == 1'd1)) begin
            ap_phi_mux_col20_phi_fu_323_p6 = 10'd0;
        end else if ((icmp_ln72_reg_1052 == 1'd0)) begin
            ap_phi_mux_col20_phi_fu_323_p6 = col_reg_1032;
        end else begin
            ap_phi_mux_col20_phi_fu_323_p6 = col20_reg_319;
        end
    end else begin
        ap_phi_mux_col20_phi_fu_323_p6 = col20_reg_319;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_238)) begin
        if ((icmp_ln72_reg_1052 == 1'd1)) begin
            ap_phi_mux_icmp_ln7322_phi_fu_295_p6 = 1'd0;
        end else if ((icmp_ln72_reg_1052 == 1'd0)) begin
            ap_phi_mux_icmp_ln7322_phi_fu_295_p6 = icmp_ln73_reg_1042;
        end else begin
            ap_phi_mux_icmp_ln7322_phi_fu_295_p6 = icmp_ln7322_reg_291;
        end
    end else begin
        ap_phi_mux_icmp_ln7322_phi_fu_295_p6 = icmp_ln7322_reg_291;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_238)) begin
        if ((icmp_ln72_reg_1052 == 1'd1)) begin
            ap_phi_mux_indvar_flatten18_phi_fu_351_p6 = 19'd0;
        end else if ((icmp_ln72_reg_1052 == 1'd0)) begin
            ap_phi_mux_indvar_flatten18_phi_fu_351_p6 = add_ln72_1_reg_976;
        end else begin
            ap_phi_mux_indvar_flatten18_phi_fu_351_p6 = indvar_flatten18_reg_347;
        end
    end else begin
        ap_phi_mux_indvar_flatten18_phi_fu_351_p6 = indvar_flatten18_reg_347;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_238)) begin
        if ((icmp_ln72_reg_1052 == 1'd1)) begin
            ap_phi_mux_row19_phi_fu_337_p6 = 10'd0;
        end else if ((icmp_ln72_reg_1052 == 1'd0)) begin
            ap_phi_mux_row19_phi_fu_337_p6 = row_reg_986;
        end else begin
            ap_phi_mux_row19_phi_fu_337_p6 = row19_reg_333;
        end
    end else begin
        ap_phi_mux_row19_phi_fu_337_p6 = row19_reg_333;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln72_fu_573_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_a_1_ce0 = 1'b1;
    end else begin
        buffer_a_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_a_1_we0 = 1'b1;
    end else begin
        buffer_a_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_a_2_ce0 = 1'b1;
    end else begin
        buffer_a_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_a_2_ce1 = 1'b1;
    end else begin
        buffer_a_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_a_2_we0 = 1'b1;
    end else begin
        buffer_a_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_b_1_ce0 = 1'b1;
    end else begin
        buffer_b_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_b_1_we0 = 1'b1;
    end else begin
        buffer_b_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_b_2_ce0 = 1'b1;
    end else begin
        buffer_b_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_b_2_ce1 = 1'b1;
    end else begin
        buffer_b_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_b_2_we0 = 1'b1;
    end else begin
        buffer_b_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_ce1 = 1'b1;
    end else begin
        dst_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln99_reg_1028_pp0_iter2_reg) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln99_reg_1028_pp0_iter2_reg) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_we1 = 1'b1;
    end else begin
        dst_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_897_ce = 1'b1;
    end else begin
        grp_fu_897_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_ce1 = 1'b1;
    end else begin
        src_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_1_fu_863_p2 = ($signed(add_ln100_fu_858_p2) + $signed(20'd1048574));

assign add_ln100_2_fu_848_p2 = ($signed(zext_ln73_2_fu_845_p1) + $signed(13'd5636));

assign add_ln100_fu_858_p2 = ($signed(sext_ln100_fu_854_p1) + $signed(grp_fu_897_p2));

assign add_ln101_cast_fu_880_p1 = add_ln101_fu_874_p2;

assign add_ln101_fu_874_p2 = (add_ln100_fu_858_p2 + 20'd637);

assign add_ln105_1_fu_703_p2 = (sub_ln105_fu_698_p2 + tmp_fu_684_p3);

assign add_ln105_fu_692_p2 = (empty_17_fu_134 + pin_a_2_fu_102);

assign add_ln106_1_fu_750_p2 = (pin_a_reg_1056 + sub_ln106_fu_744_p2);

assign add_ln106_fu_738_p2 = (tmp1_fu_730_p3 + pin_a_2_fu_102);

assign add_ln119_1_fu_786_p2 = (sub_ln119_fu_781_p2 + tmp2_fu_767_p3);

assign add_ln119_fu_775_p2 = (empty_16_fu_130 + pin_b_2_fu_98);

assign add_ln120_1_fu_833_p2 = (pin_b_reg_1063 + sub_ln120_fu_827_p2);

assign add_ln120_fu_821_p2 = (tmp3_fu_813_p3 + pin_b_2_fu_98);

assign add_ln72_1_fu_407_p2 = (ap_phi_mux_indvar_flatten18_phi_fu_351_p6 + 19'd1);

assign add_ln72_fu_567_p2 = (row_fu_421_p3 + 10'd1);

assign add_ln75_1_fu_485_p2 = (p_shl13_mid2_fu_441_p3 + zext_ln73_3_fu_481_p1);

assign add_ln75_fu_495_p2 = (zext_ln75_fu_491_p1 + p_shl_mid2_fu_433_p3);

assign add_ln77_fu_506_p2 = (add_ln75_fu_495_p2 + 20'd639);

assign and_ln99_fu_533_p2 = (select_ln73_2_fu_465_p3 & icmp_ln99_fu_527_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_238 = ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign buffer_a_2_address1 = zext_ln73_1_fu_473_p1;

assign buffer_b_2_address1 = zext_ln73_1_fu_473_p1;

assign col_fu_539_p2 = (select_ln73_fu_413_p3 + 10'd1);

assign dst_address0 = add_ln101_cast_fu_880_p1;

assign dst_address1 = zext_ln101_fu_869_p1;

assign dst_d0 = pout_b_crop_upper_fu_402_ap_return;

assign dst_d1 = pout_a_crop_upper_fu_397_ap_return;

assign grp_fu_897_p0 = grp_fu_897_p00;

assign grp_fu_897_p00 = row_fu_421_p3;

assign grp_fu_897_p1 = 20'd1278;

assign icmp39_fu_459_p2 = ((tmp_1_fu_449_p4 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_fu_555_p2 = ((tmp_3_fu_545_p4 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_573_p2 = ((ap_phi_mux_indvar_flatten18_phi_fu_351_p6 == 19'd461519) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_561_p2 = ((col_fu_539_p2 == 10'd641) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_527_p2 = ((tmp_2_fu_517_p4 != 9'd0) ? 1'b1 : 1'b0);

assign p_shl13_mid2_fu_441_p3 = {{row_fu_421_p3}, {8'd0}};

assign p_shl_mid2_fu_433_p3 = {{row_fu_421_p3}, {10'd0}};

assign row_fu_421_p3 = ((ap_phi_mux_icmp_ln7322_phi_fu_295_p6[0:0] == 1'b1) ? ap_phi_mux_add_ln7223_phi_fu_281_p6 : ap_phi_mux_row19_phi_fu_337_p6);

assign select_ln73_2_fu_465_p3 = ((ap_phi_mux_icmp_ln7322_phi_fu_295_p6[0:0] == 1'b1) ? icmp39_fu_459_p2 : ap_phi_mux_cmp7021_phi_fu_309_p6);

assign select_ln73_fu_413_p3 = ((ap_phi_mux_icmp_ln7322_phi_fu_295_p6[0:0] == 1'b1) ? 10'd0 : ap_phi_mux_col20_phi_fu_323_p6);

assign sext_ln100_fu_854_p1 = $signed(add_ln100_2_fu_848_p2);

assign src_address0 = zext_ln78_fu_512_p1;

assign src_address1 = zext_ln76_fu_501_p1;

assign sub_ln105_fu_698_p2 = (pin_a_reg_1056 - add_ln105_fu_692_p2);

assign sub_ln106_fu_744_p2 = (add_ln106_fu_738_p2 - empty_17_fu_134);

assign sub_ln119_fu_781_p2 = (pin_b_reg_1063 - add_ln119_fu_775_p2);

assign sub_ln120_fu_827_p2 = (add_ln120_fu_821_p2 - empty_16_fu_130);

assign sumx_a_1_crop_fu_361_in_r = (add_ln105_1_fu_703_p2 + buffer_a_1_q0);

assign sumx_b_1_crop_fu_371_in_r = (add_ln119_1_fu_786_p2 + buffer_b_1_q0);

assign sumy_a_1_crop_fu_366_in_r = (add_ln106_1_fu_750_p2 - buffer_a_1_q0);

assign sumy_b_1_crop_fu_376_in_r = (add_ln120_1_fu_833_p2 - buffer_b_1_q0);

assign tmp1_fu_730_p3 = {{tmp3918_fu_724_p2}, {1'd0}};

assign tmp20_fu_679_p2 = (trunc_ln82_reg_1070 - empty_13_fu_118);

assign tmp2_fu_767_p3 = {{tmp4616_fu_762_p2}, {1'd0}};

assign tmp3918_fu_724_p2 = (trunc_ln73_1_fu_720_p1 - trunc_ln73_fu_716_p1);

assign tmp3_fu_813_p3 = {{tmp5214_fu_807_p2}, {1'd0}};

assign tmp4616_fu_762_p2 = (trunc_ln83_reg_1076 - empty_12_fu_114);

assign tmp5214_fu_807_p2 = (trunc_ln73_3_fu_803_p1 - trunc_ln73_2_fu_799_p1);

assign tmp_1_fu_449_p4 = {{ap_phi_mux_add_ln7223_phi_fu_281_p6[9:1]}};

assign tmp_2_fu_517_p4 = {{select_ln73_fu_413_p3[9:1]}};

assign tmp_3_fu_545_p4 = {{row_fu_421_p3[9:1]}};

assign tmp_fu_684_p3 = {{tmp20_fu_679_p2}, {1'd0}};

assign trunc_ln73_1_fu_720_p1 = pin_a_1_fu_94[14:0];

assign trunc_ln73_2_fu_799_p1 = empty_14_fu_122[14:0];

assign trunc_ln73_3_fu_803_p1 = pin_b_1_fu_90[14:0];

assign trunc_ln73_fu_716_p1 = empty_15_fu_126[14:0];

assign trunc_ln82_fu_579_p1 = buffer_a_2_q1[14:0];

assign trunc_ln83_fu_583_p1 = buffer_b_2_q1[14:0];

assign zext_ln101_fu_869_p1 = add_ln100_1_fu_863_p2;

assign zext_ln73_1_fu_473_p1 = select_ln73_fu_413_p3;

assign zext_ln73_2_fu_845_p1 = select_ln73_reg_981_pp0_iter2_reg;

assign zext_ln73_3_fu_481_p1 = select_ln73_fu_413_p3;

assign zext_ln75_fu_491_p1 = add_ln75_1_fu_485_p2;

assign zext_ln76_fu_501_p1 = add_ln75_fu_495_p2;

assign zext_ln78_fu_512_p1 = add_ln77_fu_506_p2;

endmodule //sobel
