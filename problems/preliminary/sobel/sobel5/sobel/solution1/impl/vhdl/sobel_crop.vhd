-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_crop is
port (
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sobel_crop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal tmp_4_fu_36_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_52_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_60_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_28_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_46_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_74_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_fu_66_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln25_fu_24_p1 : STD_LOGIC_VECTOR (7 downto 0);


begin



    ap_ready <= ap_const_logic_1;
    ap_return <= 
        select_ln29_fu_66_p3 when (or_ln29_fu_74_p2(0) = '1') else 
        trunc_ln25_fu_24_p1;
    icmp_ln29_fu_46_p2 <= "1" when (signed(tmp_4_fu_36_p4) > signed(ap_const_lv8_0)) else "0";
    or_ln29_fu_74_p2 <= (tmp_fu_28_p3 or icmp_ln29_fu_46_p2);
    select_ln29_fu_66_p3 <= 
        ap_const_lv8_FF when (xor_ln29_fu_60_p2(0) = '1') else 
        ap_const_lv8_0;
    tmp_4_fu_36_p4 <= in_r(15 downto 8);
    tmp_5_fu_52_p3 <= in_r(15 downto 15);
    tmp_fu_28_p3 <= in_r(15 downto 15);
    trunc_ln25_fu_24_p1 <= in_r(8 - 1 downto 0);
    xor_ln29_fu_60_p2 <= (tmp_5_fu_52_p3 xor ap_const_lv1_1);
end behav;
