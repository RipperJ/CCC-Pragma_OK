-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    dst_ce1 : OUT STD_LOGIC;
    dst_we1 : OUT STD_LOGIC;
    dst_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sobel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel_sobel,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.965375,HLS_SYN_LAT=461522,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=619,HLS_SYN_LUT=1086,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv20_27F : STD_LOGIC_VECTOR (19 downto 0) := "00000000001001111111";
    constant ap_const_lv10_281 : STD_LOGIC_VECTOR (9 downto 0) := "1010000001";
    constant ap_const_lv19_70ACF : STD_LOGIC_VECTOR (18 downto 0) := "1110000101011001111";
    constant ap_const_lv13_1604 : STD_LOGIC_VECTOR (12 downto 0) := "1011000000100";
    constant ap_const_lv20_FFFFE : STD_LOGIC_VECTOR (19 downto 0) := "11111111111111111110";
    constant ap_const_lv20_27D : STD_LOGIC_VECTOR (19 downto 0) := "00000000001001111101";
    constant ap_const_lv20_4FE : STD_LOGIC_VECTOR (19 downto 0) := "00000000010011111110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln72_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln7223_reg_277 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln7322_reg_291 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp7021_reg_305 : STD_LOGIC_VECTOR (0 downto 0);
    signal col20_reg_319 : STD_LOGIC_VECTOR (9 downto 0);
    signal row19_reg_333 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten18_reg_347 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln72_1_fu_407_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln72_1_reg_976 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln73_fu_413_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln73_reg_981 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln73_reg_981_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln73_reg_981_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal row_fu_421_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal row_reg_986 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_a_1_addr_reg_1006 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_b_1_addr_reg_1011 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_a_2_addr_reg_1016 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_b_2_addr_reg_1022 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln99_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln99_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln99_reg_1028_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln99_reg_1028_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_539_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal col_reg_1032 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1037 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_1042 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln72_fu_567_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln72_reg_1047 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln72_reg_1052 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_reg_1052_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_reg_1052_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pin_a_reg_1056 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal pin_b_reg_1063 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln82_fu_579_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln82_reg_1070 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln83_fu_583_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln83_reg_1076 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp_a_adder_fu_381_ap_return : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_a_reg_1082 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_b_adder_fu_389_ap_return : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_b_reg_1087 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal buffer_a_1_ce0 : STD_LOGIC;
    signal buffer_a_1_we0 : STD_LOGIC;
    signal buffer_a_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_a_2_ce0 : STD_LOGIC;
    signal buffer_a_2_we0 : STD_LOGIC;
    signal buffer_a_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_a_2_ce1 : STD_LOGIC;
    signal buffer_a_2_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_b_1_ce0 : STD_LOGIC;
    signal buffer_b_1_we0 : STD_LOGIC;
    signal buffer_b_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_b_2_ce0 : STD_LOGIC;
    signal buffer_b_2_we0 : STD_LOGIC;
    signal buffer_b_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal buffer_b_2_ce1 : STD_LOGIC;
    signal buffer_b_2_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sumx_a_1_crop_fu_361_ap_ready : STD_LOGIC;
    signal sumx_a_1_crop_fu_361_in_r : STD_LOGIC_VECTOR (15 downto 0);
    signal sumx_a_1_crop_fu_361_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal sumy_a_1_crop_fu_366_ap_ready : STD_LOGIC;
    signal sumy_a_1_crop_fu_366_in_r : STD_LOGIC_VECTOR (15 downto 0);
    signal sumy_a_1_crop_fu_366_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal sumx_b_1_crop_fu_371_ap_ready : STD_LOGIC;
    signal sumx_b_1_crop_fu_371_in_r : STD_LOGIC_VECTOR (15 downto 0);
    signal sumx_b_1_crop_fu_371_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal sumy_b_1_crop_fu_376_ap_ready : STD_LOGIC;
    signal sumy_b_1_crop_fu_376_in_r : STD_LOGIC_VECTOR (15 downto 0);
    signal sumy_b_1_crop_fu_376_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_a_adder_fu_381_ap_ready : STD_LOGIC;
    signal temp_b_adder_fu_389_ap_ready : STD_LOGIC;
    signal pout_a_crop_upper_fu_397_ap_ready : STD_LOGIC;
    signal pout_a_crop_upper_fu_397_ap_return : STD_LOGIC_VECTOR (8 downto 0);
    signal pout_b_crop_upper_fu_402_ap_ready : STD_LOGIC;
    signal pout_b_crop_upper_fu_402_ap_return : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_add_ln7223_phi_fu_281_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_icmp_ln7322_phi_fu_295_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_cmp7021_phi_fu_309_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_col20_phi_fu_323_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_row19_phi_fu_337_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_indvar_flatten18_phi_fu_351_p6 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln76_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln78_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_1_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln101_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln101_cast_fu_880_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal pin_b_1_fu_90 : STD_LOGIC_VECTOR (15 downto 0);
    signal pin_a_1_fu_94 : STD_LOGIC_VECTOR (15 downto 0);
    signal pin_b_2_fu_98 : STD_LOGIC_VECTOR (15 downto 0);
    signal pin_a_2_fu_102 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_106 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_11_fu_110 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_12_fu_114 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_13_fu_118 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_14_fu_122 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_15_fu_126 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_16_fu_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_17_fu_134 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_449_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp39_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl13_mid2_fu_441_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln73_3_fu_481_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln75_1_fu_485_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln75_fu_491_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl_mid2_fu_433_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln75_fu_495_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln77_fu_506_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_2_fu_517_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln73_2_fu_465_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_545_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp20_fu_679_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln105_fu_692_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln105_fu_698_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_684_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln105_1_fu_703_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln73_1_fu_720_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln73_fu_716_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp3918_fu_724_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp1_fu_730_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln106_fu_738_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln106_fu_744_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln106_1_fu_750_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4616_fu_762_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln119_fu_775_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln119_fu_781_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_fu_767_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln119_1_fu_786_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln73_3_fu_803_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln73_2_fu_799_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp5214_fu_807_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp3_fu_813_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln120_fu_821_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln120_fu_827_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln120_1_fu_833_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln73_2_fu_845_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln100_2_fu_848_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln100_fu_854_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_897_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln100_fu_858_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln100_fu_858_p2 : signal is "no";
    signal add_ln100_1_fu_863_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln101_fu_874_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_897_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_897_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_897_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_897_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_condition_238 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component sobel_crop IS
    port (
        ap_ready : OUT STD_LOGIC;
        in_r : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_adder IS
    port (
        ap_ready : OUT STD_LOGIC;
        sumx : IN STD_LOGIC_VECTOR (7 downto 0);
        sumy : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component sobel_crop_upper IS
    port (
        ap_ready : OUT STD_LOGIC;
        in_r : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component sobel_mul_mul_10ns_12ns_20_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component sobel_buffer_a_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component sobel_buffer_a_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    buffer_a_1_U : component sobel_buffer_a_1
    generic map (
        DataWidth => 16,
        AddressRange => 641,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_a_1_addr_reg_1006,
        ce0 => buffer_a_1_ce0,
        we0 => buffer_a_1_we0,
        d0 => buffer_a_2_q1,
        q0 => buffer_a_1_q0);

    buffer_a_2_U : component sobel_buffer_a_2
    generic map (
        DataWidth => 16,
        AddressRange => 641,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_a_2_addr_reg_1016,
        ce0 => buffer_a_2_ce0,
        we0 => buffer_a_2_we0,
        d0 => src_q1,
        address1 => buffer_a_2_address1,
        ce1 => buffer_a_2_ce1,
        q1 => buffer_a_2_q1);

    buffer_b_1_U : component sobel_buffer_a_1
    generic map (
        DataWidth => 16,
        AddressRange => 641,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_b_1_addr_reg_1011,
        ce0 => buffer_b_1_ce0,
        we0 => buffer_b_1_we0,
        d0 => buffer_b_2_q1,
        q0 => buffer_b_1_q0);

    buffer_b_2_U : component sobel_buffer_a_2
    generic map (
        DataWidth => 16,
        AddressRange => 641,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_b_2_addr_reg_1022,
        ce0 => buffer_b_2_ce0,
        we0 => buffer_b_2_we0,
        d0 => src_q0,
        address1 => buffer_b_2_address1,
        ce1 => buffer_b_2_ce1,
        q1 => buffer_b_2_q1);

    sumx_a_1_crop_fu_361 : component sobel_crop
    port map (
        ap_ready => sumx_a_1_crop_fu_361_ap_ready,
        in_r => sumx_a_1_crop_fu_361_in_r,
        ap_return => sumx_a_1_crop_fu_361_ap_return);

    sumy_a_1_crop_fu_366 : component sobel_crop
    port map (
        ap_ready => sumy_a_1_crop_fu_366_ap_ready,
        in_r => sumy_a_1_crop_fu_366_in_r,
        ap_return => sumy_a_1_crop_fu_366_ap_return);

    sumx_b_1_crop_fu_371 : component sobel_crop
    port map (
        ap_ready => sumx_b_1_crop_fu_371_ap_ready,
        in_r => sumx_b_1_crop_fu_371_in_r,
        ap_return => sumx_b_1_crop_fu_371_ap_return);

    sumy_b_1_crop_fu_376 : component sobel_crop
    port map (
        ap_ready => sumy_b_1_crop_fu_376_ap_ready,
        in_r => sumy_b_1_crop_fu_376_in_r,
        ap_return => sumy_b_1_crop_fu_376_ap_return);

    temp_a_adder_fu_381 : component sobel_adder
    port map (
        ap_ready => temp_a_adder_fu_381_ap_ready,
        sumx => sumx_a_1_crop_fu_361_ap_return,
        sumy => sumy_a_1_crop_fu_366_ap_return,
        ap_return => temp_a_adder_fu_381_ap_return);

    temp_b_adder_fu_389 : component sobel_adder
    port map (
        ap_ready => temp_b_adder_fu_389_ap_ready,
        sumx => sumx_b_1_crop_fu_371_ap_return,
        sumy => sumy_b_1_crop_fu_376_ap_return,
        ap_return => temp_b_adder_fu_389_ap_return);

    pout_a_crop_upper_fu_397 : component sobel_crop_upper
    port map (
        ap_ready => pout_a_crop_upper_fu_397_ap_ready,
        in_r => temp_a_reg_1082,
        ap_return => pout_a_crop_upper_fu_397_ap_return);

    pout_b_crop_upper_fu_402 : component sobel_crop_upper
    port map (
        ap_ready => pout_b_crop_upper_fu_402_ap_ready,
        in_r => temp_b_reg_1087,
        ap_return => pout_b_crop_upper_fu_402_ap_return);

    mul_mul_10ns_12ns_20_4_1_U5 : component sobel_mul_mul_10ns_12ns_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_897_p0,
        din1 => grp_fu_897_p1,
        ce => grp_fu_897_ce,
        dout => grp_fu_897_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add_ln7223_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln72_reg_1052 = ap_const_lv1_0))) then 
                add_ln7223_reg_277 <= add_ln72_reg_1047;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln72_reg_1052 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                add_ln7223_reg_277 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    cmp7021_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln72_reg_1052 = ap_const_lv1_0))) then 
                cmp7021_reg_305 <= icmp_reg_1037;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln72_reg_1052 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                cmp7021_reg_305 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    col20_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln72_reg_1052 = ap_const_lv1_0))) then 
                col20_reg_319 <= col_reg_1032;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln72_reg_1052 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                col20_reg_319 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    icmp_ln7322_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln72_reg_1052 = ap_const_lv1_0))) then 
                icmp_ln7322_reg_291 <= icmp_ln73_reg_1042;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln72_reg_1052 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                icmp_ln7322_reg_291 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    indvar_flatten18_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln72_reg_1052 = ap_const_lv1_0))) then 
                indvar_flatten18_reg_347 <= add_ln72_1_reg_976;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln72_reg_1052 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                indvar_flatten18_reg_347 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    row19_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln72_reg_1052 = ap_const_lv1_0))) then 
                row19_reg_333 <= row_reg_986;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln72_reg_1052 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                row19_reg_333 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln72_1_reg_976 <= add_ln72_1_fu_407_p2;
                add_ln72_reg_1047 <= add_ln72_fu_567_p2;
                col_reg_1032 <= col_fu_539_p2;
                icmp_ln73_reg_1042 <= icmp_ln73_fu_561_p2;
                icmp_reg_1037 <= icmp_fu_555_p2;
                row_reg_986 <= row_fu_421_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln99_reg_1028 <= and_ln99_fu_533_p2;
                and_ln99_reg_1028_pp0_iter1_reg <= and_ln99_reg_1028;
                buffer_a_1_addr_reg_1006 <= zext_ln73_1_fu_473_p1(10 - 1 downto 0);
                buffer_a_2_addr_reg_1016 <= zext_ln73_1_fu_473_p1(10 - 1 downto 0);
                buffer_b_1_addr_reg_1011 <= zext_ln73_1_fu_473_p1(10 - 1 downto 0);
                buffer_b_2_addr_reg_1022 <= zext_ln73_1_fu_473_p1(10 - 1 downto 0);
                icmp_ln72_reg_1052 <= icmp_ln72_fu_573_p2;
                icmp_ln72_reg_1052_pp0_iter1_reg <= icmp_ln72_reg_1052;
                select_ln73_reg_981 <= select_ln73_fu_413_p3;
                select_ln73_reg_981_pp0_iter1_reg <= select_ln73_reg_981;
                trunc_ln82_reg_1070 <= trunc_ln82_fu_579_p1;
                trunc_ln83_reg_1076 <= trunc_ln83_fu_583_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln99_reg_1028_pp0_iter2_reg <= and_ln99_reg_1028_pp0_iter1_reg;
                icmp_ln72_reg_1052_pp0_iter2_reg <= icmp_ln72_reg_1052_pp0_iter1_reg;
                select_ln73_reg_981_pp0_iter2_reg <= select_ln73_reg_981_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                empty_11_fu_110 <= trunc_ln82_reg_1070;
                empty_12_fu_114 <= empty_fu_106;
                empty_13_fu_118 <= empty_11_fu_110;
                empty_14_fu_122 <= buffer_b_1_q0;
                empty_15_fu_126 <= buffer_a_1_q0;
                empty_16_fu_130 <= empty_14_fu_122;
                empty_17_fu_134 <= empty_15_fu_126;
                empty_fu_106 <= trunc_ln83_reg_1076;
                pin_a_1_fu_94 <= pin_a_reg_1056;
                pin_a_2_fu_102 <= pin_a_1_fu_94;
                pin_b_1_fu_90 <= pin_b_reg_1063;
                pin_b_2_fu_98 <= pin_b_1_fu_90;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                pin_a_reg_1056 <= src_q1;
                pin_b_reg_1063 <= src_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln99_reg_1028_pp0_iter1_reg))) then
                temp_a_reg_1082 <= temp_a_adder_fu_381_ap_return;
                temp_b_reg_1087 <= temp_b_adder_fu_389_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln100_1_fu_863_p2 <= std_logic_vector(unsigned(add_ln100_fu_858_p2) + unsigned(ap_const_lv20_FFFFE));
    add_ln100_2_fu_848_p2 <= std_logic_vector(unsigned(zext_ln73_2_fu_845_p1) + unsigned(ap_const_lv13_1604));
    add_ln100_fu_858_p2 <= std_logic_vector(signed(sext_ln100_fu_854_p1) + signed(grp_fu_897_p2));
    add_ln101_cast_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln101_fu_874_p2),64));
    add_ln101_fu_874_p2 <= std_logic_vector(unsigned(add_ln100_fu_858_p2) + unsigned(ap_const_lv20_27D));
    add_ln105_1_fu_703_p2 <= std_logic_vector(unsigned(sub_ln105_fu_698_p2) + unsigned(tmp_fu_684_p3));
    add_ln105_fu_692_p2 <= std_logic_vector(unsigned(empty_17_fu_134) + unsigned(pin_a_2_fu_102));
    add_ln106_1_fu_750_p2 <= std_logic_vector(unsigned(pin_a_reg_1056) + unsigned(sub_ln106_fu_744_p2));
    add_ln106_fu_738_p2 <= std_logic_vector(unsigned(tmp1_fu_730_p3) + unsigned(pin_a_2_fu_102));
    add_ln119_1_fu_786_p2 <= std_logic_vector(unsigned(sub_ln119_fu_781_p2) + unsigned(tmp2_fu_767_p3));
    add_ln119_fu_775_p2 <= std_logic_vector(unsigned(empty_16_fu_130) + unsigned(pin_b_2_fu_98));
    add_ln120_1_fu_833_p2 <= std_logic_vector(unsigned(pin_b_reg_1063) + unsigned(sub_ln120_fu_827_p2));
    add_ln120_fu_821_p2 <= std_logic_vector(unsigned(tmp3_fu_813_p3) + unsigned(pin_b_2_fu_98));
    add_ln72_1_fu_407_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten18_phi_fu_351_p6) + unsigned(ap_const_lv19_1));
    add_ln72_fu_567_p2 <= std_logic_vector(unsigned(row_fu_421_p3) + unsigned(ap_const_lv10_1));
    add_ln75_1_fu_485_p2 <= std_logic_vector(unsigned(p_shl13_mid2_fu_441_p3) + unsigned(zext_ln73_3_fu_481_p1));
    add_ln75_fu_495_p2 <= std_logic_vector(unsigned(zext_ln75_fu_491_p1) + unsigned(p_shl_mid2_fu_433_p3));
    add_ln77_fu_506_p2 <= std_logic_vector(unsigned(add_ln75_fu_495_p2) + unsigned(ap_const_lv20_27F));
    and_ln99_fu_533_p2 <= (select_ln73_2_fu_465_p3 and icmp_ln99_fu_527_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_238_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_238 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln72_reg_1052_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln72_reg_1052_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_add_ln7223_phi_fu_281_p6_assign_proc : process(add_ln7223_reg_277, add_ln72_reg_1047, icmp_ln72_reg_1052, ap_condition_238)
    begin
        if ((ap_const_boolean_1 = ap_condition_238)) then
            if ((icmp_ln72_reg_1052 = ap_const_lv1_1)) then 
                ap_phi_mux_add_ln7223_phi_fu_281_p6 <= ap_const_lv10_1;
            elsif ((icmp_ln72_reg_1052 = ap_const_lv1_0)) then 
                ap_phi_mux_add_ln7223_phi_fu_281_p6 <= add_ln72_reg_1047;
            else 
                ap_phi_mux_add_ln7223_phi_fu_281_p6 <= add_ln7223_reg_277;
            end if;
        else 
            ap_phi_mux_add_ln7223_phi_fu_281_p6 <= add_ln7223_reg_277;
        end if; 
    end process;


    ap_phi_mux_cmp7021_phi_fu_309_p6_assign_proc : process(cmp7021_reg_305, icmp_reg_1037, icmp_ln72_reg_1052, ap_condition_238)
    begin
        if ((ap_const_boolean_1 = ap_condition_238)) then
            if ((icmp_ln72_reg_1052 = ap_const_lv1_1)) then 
                ap_phi_mux_cmp7021_phi_fu_309_p6 <= ap_const_lv1_0;
            elsif ((icmp_ln72_reg_1052 = ap_const_lv1_0)) then 
                ap_phi_mux_cmp7021_phi_fu_309_p6 <= icmp_reg_1037;
            else 
                ap_phi_mux_cmp7021_phi_fu_309_p6 <= cmp7021_reg_305;
            end if;
        else 
            ap_phi_mux_cmp7021_phi_fu_309_p6 <= cmp7021_reg_305;
        end if; 
    end process;


    ap_phi_mux_col20_phi_fu_323_p6_assign_proc : process(col20_reg_319, col_reg_1032, icmp_ln72_reg_1052, ap_condition_238)
    begin
        if ((ap_const_boolean_1 = ap_condition_238)) then
            if ((icmp_ln72_reg_1052 = ap_const_lv1_1)) then 
                ap_phi_mux_col20_phi_fu_323_p6 <= ap_const_lv10_0;
            elsif ((icmp_ln72_reg_1052 = ap_const_lv1_0)) then 
                ap_phi_mux_col20_phi_fu_323_p6 <= col_reg_1032;
            else 
                ap_phi_mux_col20_phi_fu_323_p6 <= col20_reg_319;
            end if;
        else 
            ap_phi_mux_col20_phi_fu_323_p6 <= col20_reg_319;
        end if; 
    end process;


    ap_phi_mux_icmp_ln7322_phi_fu_295_p6_assign_proc : process(icmp_ln7322_reg_291, icmp_ln73_reg_1042, icmp_ln72_reg_1052, ap_condition_238)
    begin
        if ((ap_const_boolean_1 = ap_condition_238)) then
            if ((icmp_ln72_reg_1052 = ap_const_lv1_1)) then 
                ap_phi_mux_icmp_ln7322_phi_fu_295_p6 <= ap_const_lv1_0;
            elsif ((icmp_ln72_reg_1052 = ap_const_lv1_0)) then 
                ap_phi_mux_icmp_ln7322_phi_fu_295_p6 <= icmp_ln73_reg_1042;
            else 
                ap_phi_mux_icmp_ln7322_phi_fu_295_p6 <= icmp_ln7322_reg_291;
            end if;
        else 
            ap_phi_mux_icmp_ln7322_phi_fu_295_p6 <= icmp_ln7322_reg_291;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten18_phi_fu_351_p6_assign_proc : process(indvar_flatten18_reg_347, add_ln72_1_reg_976, icmp_ln72_reg_1052, ap_condition_238)
    begin
        if ((ap_const_boolean_1 = ap_condition_238)) then
            if ((icmp_ln72_reg_1052 = ap_const_lv1_1)) then 
                ap_phi_mux_indvar_flatten18_phi_fu_351_p6 <= ap_const_lv19_0;
            elsif ((icmp_ln72_reg_1052 = ap_const_lv1_0)) then 
                ap_phi_mux_indvar_flatten18_phi_fu_351_p6 <= add_ln72_1_reg_976;
            else 
                ap_phi_mux_indvar_flatten18_phi_fu_351_p6 <= indvar_flatten18_reg_347;
            end if;
        else 
            ap_phi_mux_indvar_flatten18_phi_fu_351_p6 <= indvar_flatten18_reg_347;
        end if; 
    end process;


    ap_phi_mux_row19_phi_fu_337_p6_assign_proc : process(row19_reg_333, row_reg_986, icmp_ln72_reg_1052, ap_condition_238)
    begin
        if ((ap_const_boolean_1 = ap_condition_238)) then
            if ((icmp_ln72_reg_1052 = ap_const_lv1_1)) then 
                ap_phi_mux_row19_phi_fu_337_p6 <= ap_const_lv10_0;
            elsif ((icmp_ln72_reg_1052 = ap_const_lv1_0)) then 
                ap_phi_mux_row19_phi_fu_337_p6 <= row_reg_986;
            else 
                ap_phi_mux_row19_phi_fu_337_p6 <= row19_reg_333;
            end if;
        else 
            ap_phi_mux_row19_phi_fu_337_p6 <= row19_reg_333;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln72_fu_573_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln72_fu_573_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_a_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_a_1_ce0 <= ap_const_logic_1;
        else 
            buffer_a_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_a_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_a_1_we0 <= ap_const_logic_1;
        else 
            buffer_a_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_a_2_address1 <= zext_ln73_1_fu_473_p1(10 - 1 downto 0);

    buffer_a_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_a_2_ce0 <= ap_const_logic_1;
        else 
            buffer_a_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_a_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_a_2_ce1 <= ap_const_logic_1;
        else 
            buffer_a_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_a_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_a_2_we0 <= ap_const_logic_1;
        else 
            buffer_a_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_b_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_b_1_ce0 <= ap_const_logic_1;
        else 
            buffer_b_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_b_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_b_1_we0 <= ap_const_logic_1;
        else 
            buffer_b_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_b_2_address1 <= zext_ln73_1_fu_473_p1(10 - 1 downto 0);

    buffer_b_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_b_2_ce0 <= ap_const_logic_1;
        else 
            buffer_b_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_b_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buffer_b_2_ce1 <= ap_const_logic_1;
        else 
            buffer_b_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_b_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            buffer_b_2_we0 <= ap_const_logic_1;
        else 
            buffer_b_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_539_p2 <= std_logic_vector(unsigned(select_ln73_fu_413_p3) + unsigned(ap_const_lv10_1));
    dst_address0 <= add_ln101_cast_fu_880_p1(20 - 1 downto 0);
    dst_address1 <= zext_ln101_fu_869_p1(20 - 1 downto 0);

    dst_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dst_ce1 <= ap_const_logic_1;
        else 
            dst_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dst_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pout_b_crop_upper_fu_402_ap_return),16));
    dst_d1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pout_a_crop_upper_fu_397_ap_return),16));

    dst_we0_assign_proc : process(ap_block_pp0_stage0_11001, and_ln99_reg_1028_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln99_reg_1028_pp0_iter2_reg) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_we1_assign_proc : process(ap_block_pp0_stage0_11001, and_ln99_reg_1028_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln99_reg_1028_pp0_iter2_reg) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dst_we1 <= ap_const_logic_1;
        else 
            dst_we1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_897_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_897_ce <= ap_const_logic_1;
        else 
            grp_fu_897_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_897_p0 <= grp_fu_897_p00(10 - 1 downto 0);
    grp_fu_897_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_fu_421_p3),20));
    grp_fu_897_p1 <= ap_const_lv20_4FE(12 - 1 downto 0);
    icmp39_fu_459_p2 <= "0" when (tmp_1_fu_449_p4 = ap_const_lv9_0) else "1";
    icmp_fu_555_p2 <= "0" when (tmp_3_fu_545_p4 = ap_const_lv9_0) else "1";
    icmp_ln72_fu_573_p2 <= "1" when (ap_phi_mux_indvar_flatten18_phi_fu_351_p6 = ap_const_lv19_70ACF) else "0";
    icmp_ln73_fu_561_p2 <= "1" when (col_fu_539_p2 = ap_const_lv10_281) else "0";
    icmp_ln99_fu_527_p2 <= "0" when (tmp_2_fu_517_p4 = ap_const_lv9_0) else "1";
    p_shl13_mid2_fu_441_p3 <= (row_fu_421_p3 & ap_const_lv8_0);
    p_shl_mid2_fu_433_p3 <= (row_fu_421_p3 & ap_const_lv10_0);
    row_fu_421_p3 <= 
        ap_phi_mux_add_ln7223_phi_fu_281_p6 when (ap_phi_mux_icmp_ln7322_phi_fu_295_p6(0) = '1') else 
        ap_phi_mux_row19_phi_fu_337_p6;
    select_ln73_2_fu_465_p3 <= 
        icmp39_fu_459_p2 when (ap_phi_mux_icmp_ln7322_phi_fu_295_p6(0) = '1') else 
        ap_phi_mux_cmp7021_phi_fu_309_p6;
    select_ln73_fu_413_p3 <= 
        ap_const_lv10_0 when (ap_phi_mux_icmp_ln7322_phi_fu_295_p6(0) = '1') else 
        ap_phi_mux_col20_phi_fu_323_p6;
        sext_ln100_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln100_2_fu_848_p2),20));

    src_address0 <= zext_ln78_fu_512_p1(20 - 1 downto 0);
    src_address1 <= zext_ln76_fu_501_p1(20 - 1 downto 0);

    src_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_ce1 <= ap_const_logic_1;
        else 
            src_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln105_fu_698_p2 <= std_logic_vector(unsigned(pin_a_reg_1056) - unsigned(add_ln105_fu_692_p2));
    sub_ln106_fu_744_p2 <= std_logic_vector(unsigned(add_ln106_fu_738_p2) - unsigned(empty_17_fu_134));
    sub_ln119_fu_781_p2 <= std_logic_vector(unsigned(pin_b_reg_1063) - unsigned(add_ln119_fu_775_p2));
    sub_ln120_fu_827_p2 <= std_logic_vector(unsigned(add_ln120_fu_821_p2) - unsigned(empty_16_fu_130));
    sumx_a_1_crop_fu_361_in_r <= std_logic_vector(unsigned(add_ln105_1_fu_703_p2) + unsigned(buffer_a_1_q0));
    sumx_b_1_crop_fu_371_in_r <= std_logic_vector(unsigned(add_ln119_1_fu_786_p2) + unsigned(buffer_b_1_q0));
    sumy_a_1_crop_fu_366_in_r <= std_logic_vector(unsigned(add_ln106_1_fu_750_p2) - unsigned(buffer_a_1_q0));
    sumy_b_1_crop_fu_376_in_r <= std_logic_vector(unsigned(add_ln120_1_fu_833_p2) - unsigned(buffer_b_1_q0));
    tmp1_fu_730_p3 <= (tmp3918_fu_724_p2 & ap_const_lv1_0);
    tmp20_fu_679_p2 <= std_logic_vector(unsigned(trunc_ln82_reg_1070) - unsigned(empty_13_fu_118));
    tmp2_fu_767_p3 <= (tmp4616_fu_762_p2 & ap_const_lv1_0);
    tmp3918_fu_724_p2 <= std_logic_vector(unsigned(trunc_ln73_1_fu_720_p1) - unsigned(trunc_ln73_fu_716_p1));
    tmp3_fu_813_p3 <= (tmp5214_fu_807_p2 & ap_const_lv1_0);
    tmp4616_fu_762_p2 <= std_logic_vector(unsigned(trunc_ln83_reg_1076) - unsigned(empty_12_fu_114));
    tmp5214_fu_807_p2 <= std_logic_vector(unsigned(trunc_ln73_3_fu_803_p1) - unsigned(trunc_ln73_2_fu_799_p1));
    tmp_1_fu_449_p4 <= ap_phi_mux_add_ln7223_phi_fu_281_p6(9 downto 1);
    tmp_2_fu_517_p4 <= select_ln73_fu_413_p3(9 downto 1);
    tmp_3_fu_545_p4 <= row_fu_421_p3(9 downto 1);
    tmp_fu_684_p3 <= (tmp20_fu_679_p2 & ap_const_lv1_0);
    trunc_ln73_1_fu_720_p1 <= pin_a_1_fu_94(15 - 1 downto 0);
    trunc_ln73_2_fu_799_p1 <= empty_14_fu_122(15 - 1 downto 0);
    trunc_ln73_3_fu_803_p1 <= pin_b_1_fu_90(15 - 1 downto 0);
    trunc_ln73_fu_716_p1 <= empty_15_fu_126(15 - 1 downto 0);
    trunc_ln82_fu_579_p1 <= buffer_a_2_q1(15 - 1 downto 0);
    trunc_ln83_fu_583_p1 <= buffer_b_2_q1(15 - 1 downto 0);
    zext_ln101_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln100_1_fu_863_p2),64));
    zext_ln73_1_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_fu_413_p3),64));
    zext_ln73_2_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_reg_981_pp0_iter2_reg),13));
    zext_ln73_3_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_fu_413_p3),18));
    zext_ln75_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_1_fu_485_p2),20));
    zext_ln76_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_fu_495_p2),64));
    zext_ln78_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln77_fu_506_p2),64));
end behav;
