

================================================================
== Vitis HLS Report for 'sobel_kernel'
================================================================
* Date:           Mon May 31 18:14:23 2021

* Version:        2020.2 (Build 3064766 on Wed Nov 18 09:12:47 MST 2020)
* Project:        sobel
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: virtexuplus
* Target device:  xcu50-fsvh2104-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  3.342 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |        0|        0|      0 ns|      0 ns|    1|    1|      yes|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 1


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 1
* Pipeline : 1
  Pipeline-0 : II = 1, D = 1, States = { 1 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 3.34>
ST_1 : Operation 2 [1/1] (0.00ns)   --->   "%specpipeline_ln3 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_0" [sobel.cpp:3]   --->   Operation 2 'specpipeline' 'specpipeline_ln3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 3 [1/1] (0.00ns)   --->   "%window_2_2_read_1 = read i16 @_ssdm_op_Read.ap_auto.i16, i16 %window_2_2_read" [sobel.cpp:3]   --->   Operation 3 'read' 'window_2_2_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "%window_2_1_read_1 = read i15 @_ssdm_op_Read.ap_auto.i15, i15 %window_2_1_read" [sobel.cpp:3]   --->   Operation 4 'read' 'window_2_1_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%window_2_0_read_1 = read i16 @_ssdm_op_Read.ap_auto.i16, i16 %window_2_0_read" [sobel.cpp:3]   --->   Operation 5 'read' 'window_2_0_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%window_1_2_read_1 = read i15 @_ssdm_op_Read.ap_auto.i15, i15 %window_1_2_read" [sobel.cpp:3]   --->   Operation 6 'read' 'window_1_2_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%window_1_0_read_1 = read i15 @_ssdm_op_Read.ap_auto.i15, i15 %window_1_0_read" [sobel.cpp:3]   --->   Operation 7 'read' 'window_1_0_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%window_0_2_read_1 = read i16 @_ssdm_op_Read.ap_auto.i16, i16 %window_0_2_read" [sobel.cpp:3]   --->   Operation 8 'read' 'window_0_2_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%window_0_1_read_1 = read i15 @_ssdm_op_Read.ap_auto.i15, i15 %window_0_1_read" [sobel.cpp:3]   --->   Operation 9 'read' 'window_0_1_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%window_0_0_read_1 = read i16 @_ssdm_op_Read.ap_auto.i16, i16 %window_0_0_read" [sobel.cpp:3]   --->   Operation 10 'read' 'window_0_0_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.77ns)   --->   "%tmp11 = sub i15 %window_1_2_read_1, i15 %window_1_0_read_1" [sobel.cpp:3]   --->   Operation 11 'sub' 'tmp11' <Predicate = true> <Delay = 0.77> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%tmp8 = bitconcatenate i16 @_ssdm_op_BitConcatenate.i16.i15.i1, i15 %tmp11, i1 0" [sobel.cpp:3]   --->   Operation 12 'bitconcatenate' 'tmp8' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln17 = add i16 %window_2_2_read_1, i16 %window_0_2_read_1" [sobel.cpp:17]   --->   Operation 13 'add' 'add_ln17' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.41> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync>
ST_1 : Operation 14 [1/1] (0.67ns) (root node of TernaryAdder)   --->   "%sub_ln17 = sub i16 %add_ln17, i16 %window_0_0_read_1" [sobel.cpp:17]   --->   Operation 14 'sub' 'sub_ln17' <Predicate = true> <Delay = 0.67> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.41> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync>
ST_1 : Operation 15 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln17_1 = add i16 %sub_ln17, i16 %tmp8" [sobel.cpp:17]   --->   Operation 15 'add' 'add_ln17_1' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.41> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync>
ST_1 : Operation 16 [1/1] (0.67ns) (root node of TernaryAdder)   --->   "%sumx = sub i16 %add_ln17_1, i16 %window_2_0_read_1" [sobel.cpp:17]   --->   Operation 16 'sub' 'sumx' <Predicate = true> <Delay = 0.67> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.41> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync>
ST_1 : Operation 17 [1/1] (0.00ns) (grouped into LUT with out node sumx_1)   --->   "%trunc_ln10 = trunc i16 %sumx" [sobel.cpp:10]   --->   Operation 17 'trunc' 'trunc_ln10' <Predicate = (!or_ln28)> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.77ns)   --->   "%tmp139 = sub i15 %window_2_1_read_1, i15 %window_0_1_read_1" [sobel.cpp:3]   --->   Operation 18 'sub' 'tmp139' <Predicate = true> <Delay = 0.77> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%tmp = bitconcatenate i16 @_ssdm_op_BitConcatenate.i16.i15.i1, i15 %tmp139, i1 0" [sobel.cpp:3]   --->   Operation 19 'bitconcatenate' 'tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%sub_ln18 = sub i16 %window_2_2_read_1, i16 %window_0_2_read_1" [sobel.cpp:18]   --->   Operation 20 'sub' 'sub_ln18' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.41> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync>
ST_1 : Operation 21 [1/1] (0.67ns) (root node of TernaryAdder)   --->   "%sub_ln18_1 = sub i16 %sub_ln18, i16 %window_0_0_read_1" [sobel.cpp:18]   --->   Operation 21 'sub' 'sub_ln18_1' <Predicate = true> <Delay = 0.67> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.41> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%trunc_ln18 = trunc i16 %window_2_0_read_1" [sobel.cpp:18]   --->   Operation 22 'trunc' 'trunc_ln18' <Predicate = (!or_ln29)> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%trunc_ln18_2 = trunc i15 %tmp139" [sobel.cpp:18]   --->   Operation 23 'trunc' 'trunc_ln18_2' <Predicate = (!or_ln29)> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%trunc_ln18_1 = bitconcatenate i8 @_ssdm_op_BitConcatenate.i8.i7.i1, i7 %trunc_ln18_2, i1 0" [sobel.cpp:18]   --->   Operation 24 'bitconcatenate' 'trunc_ln18_1' <Predicate = (!or_ln29)> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln18 = add i16 %tmp, i16 %window_2_0_read_1" [sobel.cpp:18]   --->   Operation 25 'add' 'add_ln18' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.41> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%trunc_ln18_3 = trunc i16 %sub_ln18_1" [sobel.cpp:18]   --->   Operation 26 'trunc' 'trunc_ln18_3' <Predicate = (!or_ln29)> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln18_1 = add i8 %trunc_ln18_1, i8 %trunc_ln18" [sobel.cpp:18]   --->   Operation 27 'add' 'add_ln18_1' <Predicate = (!or_ln29)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.41> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync>
ST_1 : Operation 28 [1/1] (0.67ns) (root node of TernaryAdder)   --->   "%sumy = add i16 %add_ln18, i16 %sub_ln18_1" [sobel.cpp:18]   --->   Operation 28 'add' 'sumy' <Predicate = true> <Delay = 0.67> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.41> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync>
ST_1 : Operation 29 [1/1] (0.83ns) (root node of TernaryAdder)   --->   "%add_ln10 = add i8 %add_ln18_1, i8 %trunc_ln18_3" [sobel.cpp:10]   --->   Operation 29 'add' 'add_ln10' <Predicate = (!or_ln29)> <Delay = 0.83> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.41> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync>
ST_1 : Operation 30 [1/1] (0.00ns) (grouped into LUT with out node sumx_1)   --->   "%tmp_1 = bitselect i1 @_ssdm_op_BitSelect.i1.i16.i32, i16 %sumx, i32 15" [sobel.cpp:28]   --->   Operation 30 'bitselect' 'tmp_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%tmp_2 = partselect i8 @_ssdm_op_PartSelect.i8.i16.i32.i32, i16 %sumx, i32 8, i32 15" [sobel.cpp:28]   --->   Operation 31 'partselect' 'tmp_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.58ns)   --->   "%icmp_ln28 = icmp_sgt  i8 %tmp_2, i8 0" [sobel.cpp:28]   --->   Operation 32 'icmp' 'icmp_ln28' <Predicate = true> <Delay = 0.58> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.58> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 33 [1/1] (0.00ns) (grouped into LUT with out node sumx_1)   --->   "%tmp_3 = bitselect i1 @_ssdm_op_BitSelect.i1.i16.i32, i16 %sumx, i32 15" [sobel.cpp:28]   --->   Operation 33 'bitselect' 'tmp_3' <Predicate = (or_ln28)> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns) (grouped into LUT with out node sumx_1)   --->   "%xor_ln28 = xor i1 %tmp_3, i1 1" [sobel.cpp:28]   --->   Operation 34 'xor' 'xor_ln28' <Predicate = (or_ln28)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.12> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 35 [1/1] (0.00ns) (grouped into LUT with out node sumx_1)   --->   "%select_ln28 = select i1 %xor_ln28, i8 255, i8 0" [sobel.cpp:28]   --->   Operation 35 'select' 'select_ln28' <Predicate = (or_ln28)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.30> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 36 [1/1] (0.00ns) (grouped into LUT with out node sumx_1)   --->   "%or_ln28 = or i1 %tmp_1, i1 %icmp_ln28" [sobel.cpp:28]   --->   Operation 36 'or' 'or_ln28' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.12> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 37 [1/1] (0.30ns) (out node of the LUT)   --->   "%sumx_1 = select i1 %or_ln28, i8 %select_ln28, i8 %trunc_ln10" [sobel.cpp:28]   --->   Operation 37 'select' 'sumx_1' <Predicate = true> <Delay = 0.30> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.30> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 38 [1/1] (0.00ns) (grouped into LUT with out node add_ln30)   --->   "%zext_ln10 = zext i8 %sumx_1" [sobel.cpp:10]   --->   Operation 38 'zext' 'zext_ln10' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns) (grouped into LUT with out node add_ln30)   --->   "%tmp_4 = bitselect i1 @_ssdm_op_BitSelect.i1.i16.i32, i16 %sumy, i32 15" [sobel.cpp:29]   --->   Operation 39 'bitselect' 'tmp_4' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%tmp_5 = partselect i8 @_ssdm_op_PartSelect.i8.i16.i32.i32, i16 %sumy, i32 8, i32 15" [sobel.cpp:29]   --->   Operation 40 'partselect' 'tmp_5' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.58ns)   --->   "%icmp_ln29 = icmp_sgt  i8 %tmp_5, i8 0" [sobel.cpp:29]   --->   Operation 41 'icmp' 'icmp_ln29' <Predicate = true> <Delay = 0.58> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.58> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 42 [1/1] (0.00ns) (grouped into LUT with out node add_ln30)   --->   "%tmp_6 = bitselect i1 @_ssdm_op_BitSelect.i1.i16.i32, i16 %sumy, i32 15" [sobel.cpp:29]   --->   Operation 42 'bitselect' 'tmp_6' <Predicate = (or_ln29)> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns) (grouped into LUT with out node add_ln30)   --->   "%xor_ln29 = xor i1 %tmp_6, i1 1" [sobel.cpp:29]   --->   Operation 43 'xor' 'xor_ln29' <Predicate = (or_ln29)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.12> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 44 [1/1] (0.00ns) (grouped into LUT with out node add_ln30)   --->   "%select_ln29 = select i1 %xor_ln29, i8 255, i8 0" [sobel.cpp:29]   --->   Operation 44 'select' 'select_ln29' <Predicate = (or_ln29)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.30> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 45 [1/1] (0.00ns) (grouped into LUT with out node add_ln30)   --->   "%or_ln29 = or i1 %tmp_4, i1 %icmp_ln29" [sobel.cpp:29]   --->   Operation 45 'or' 'or_ln29' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.12> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 46 [1/1] (0.00ns) (grouped into LUT with out node add_ln30)   --->   "%sumy_1 = select i1 %or_ln29, i8 %select_ln29, i8 %add_ln10" [sobel.cpp:29]   --->   Operation 46 'select' 'sumy_1' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.30> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 47 [1/1] (0.00ns) (grouped into LUT with out node add_ln30)   --->   "%zext_ln10_1 = zext i8 %sumy_1" [sobel.cpp:10]   --->   Operation 47 'zext' 'zext_ln10_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 48 [1/1] (0.70ns) (out node of the LUT)   --->   "%add_ln30 = add i9 %zext_ln10_1, i9 %zext_ln10" [sobel.cpp:30]   --->   Operation 48 'add' 'add_ln30' <Predicate = true> <Delay = 0.70> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%tmp_7 = bitselect i1 @_ssdm_op_BitSelect.i1.i9.i32, i9 %add_ln30, i32 8" [sobel.cpp:30]   --->   Operation 49 'bitselect' 'tmp_7' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.30ns)   --->   "%sum = select i1 %tmp_7, i9 255, i9 %add_ln30" [sobel.cpp:30]   --->   Operation 50 'select' 'sum' <Predicate = true> <Delay = 0.30> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.30> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 51 [1/1] (0.00ns)   --->   "%ret_ln32 = ret i9 %sum" [sobel.cpp:32]   --->   Operation 51 'ret' 'ret_ln32' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 2.7ns.

 <State 1>: 3.34ns
The critical path consists of the following:
	wire read on port 'window_1_2_read' (sobel.cpp:3) [13]  (0 ns)
	'sub' operation ('tmp11', sobel.cpp:3) [18]  (0.775 ns)
	'add' operation ('add_ln17_1', sobel.cpp:17) [22]  (0 ns)
	'sub' operation ('sumx', sobel.cpp:17) [23]  (0.675 ns)
	'icmp' operation ('icmp_ln28', sobel.cpp:28) [39]  (0.581 ns)
	'or' operation ('or_ln28', sobel.cpp:28) [43]  (0 ns)
	'select' operation ('sumx', sobel.cpp:28) [44]  (0.303 ns)
	'add' operation ('add_ln30', sobel.cpp:30) [55]  (0.705 ns)
	'select' operation ('sum', sobel.cpp:30) [57]  (0.303 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
