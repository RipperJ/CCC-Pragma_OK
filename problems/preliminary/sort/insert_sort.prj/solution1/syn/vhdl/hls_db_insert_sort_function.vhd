-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_db_insert_sort_function is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    din_strm_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    din_strm_V_empty_n : IN STD_LOGIC;
    din_strm_V_read : OUT STD_LOGIC;
    kin_strm_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    kin_strm_V_empty_n : IN STD_LOGIC;
    kin_strm_V_read : OUT STD_LOGIC;
    strm_in_end_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_in_end_V_empty_n : IN STD_LOGIC;
    strm_in_end_V_read : OUT STD_LOGIC;
    dout_strm_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    dout_strm_V_full_n : IN STD_LOGIC;
    dout_strm_V_write : OUT STD_LOGIC;
    kout_strm_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    kout_strm_V_full_n : IN STD_LOGIC;
    kout_strm_V_write : OUT STD_LOGIC;
    strm_out_end_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    strm_out_end_V_full_n : IN STD_LOGIC;
    strm_out_end_V_write : OUT STD_LOGIC;
    sign : IN STD_LOGIC );
end;


architecture behav of hls_db_insert_sort_function is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_db_insert_sort_function_hls_db_insert_sort_function,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.013450,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=403,HLS_SYN_LUT=1371,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start : STD_LOGIC;
    signal grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_done : STD_LOGIC;
    signal grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_idle : STD_LOGIC;
    signal grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_ready : STD_LOGIC;
    signal grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_din_strm_V_read : STD_LOGIC;
    signal grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kin_strm_V_read : STD_LOGIC;
    signal grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_in_end_V_read : STD_LOGIC;
    signal grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_dout_strm_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_dout_strm_V_write : STD_LOGIC;
    signal grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kout_strm_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kout_strm_V_write : STD_LOGIC;
    signal grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_out_end_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_out_end_V_write : STD_LOGIC;
    signal grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component hls_db_insert_sort_function_insert_sort_top_unsigned_int_unsigned_int_4_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        din_strm_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        din_strm_V_empty_n : IN STD_LOGIC;
        din_strm_V_read : OUT STD_LOGIC;
        kin_strm_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        kin_strm_V_empty_n : IN STD_LOGIC;
        kin_strm_V_read : OUT STD_LOGIC;
        strm_in_end_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        strm_in_end_V_empty_n : IN STD_LOGIC;
        strm_in_end_V_read : OUT STD_LOGIC;
        dout_strm_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dout_strm_V_full_n : IN STD_LOGIC;
        dout_strm_V_write : OUT STD_LOGIC;
        kout_strm_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        kout_strm_V_full_n : IN STD_LOGIC;
        kout_strm_V_write : OUT STD_LOGIC;
        strm_out_end_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        strm_out_end_V_full_n : IN STD_LOGIC;
        strm_out_end_V_write : OUT STD_LOGIC;
        sign : IN STD_LOGIC );
    end component;



begin
    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40 : component hls_db_insert_sort_function_insert_sort_top_unsigned_int_unsigned_int_4_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start,
        ap_done => grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_done,
        ap_idle => grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_idle,
        ap_ready => grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_ready,
        din_strm_V_dout => din_strm_V_dout,
        din_strm_V_empty_n => din_strm_V_empty_n,
        din_strm_V_read => grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_din_strm_V_read,
        kin_strm_V_dout => kin_strm_V_dout,
        kin_strm_V_empty_n => kin_strm_V_empty_n,
        kin_strm_V_read => grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kin_strm_V_read,
        strm_in_end_V_dout => strm_in_end_V_dout,
        strm_in_end_V_empty_n => strm_in_end_V_empty_n,
        strm_in_end_V_read => grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_in_end_V_read,
        dout_strm_V_din => grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_dout_strm_V_din,
        dout_strm_V_full_n => dout_strm_V_full_n,
        dout_strm_V_write => grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_dout_strm_V_write,
        kout_strm_V_din => grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kout_strm_V_din,
        kout_strm_V_full_n => kout_strm_V_full_n,
        kout_strm_V_write => grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kout_strm_V_write,
        strm_out_end_V_din => grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_out_end_V_din,
        strm_out_end_V_full_n => strm_out_end_V_full_n,
        strm_out_end_V_write => grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_out_end_V_write,
        sign => sign);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_ready = ap_const_logic_1)) then 
                    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    din_strm_V_read_assign_proc : process(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_din_strm_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            din_strm_V_read <= grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_din_strm_V_read;
        else 
            din_strm_V_read <= ap_const_logic_0;
        end if; 
    end process;

    dout_strm_V_din <= grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_dout_strm_V_din;

    dout_strm_V_write_assign_proc : process(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_dout_strm_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dout_strm_V_write <= grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_dout_strm_V_write;
        else 
            dout_strm_V_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start <= grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start_reg;

    kin_strm_V_read_assign_proc : process(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kin_strm_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kin_strm_V_read <= grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kin_strm_V_read;
        else 
            kin_strm_V_read <= ap_const_logic_0;
        end if; 
    end process;

    kout_strm_V_din <= grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kout_strm_V_din;

    kout_strm_V_write_assign_proc : process(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kout_strm_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kout_strm_V_write <= grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kout_strm_V_write;
        else 
            kout_strm_V_write <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_end_V_read_assign_proc : process(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_in_end_V_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            strm_in_end_V_read <= grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_in_end_V_read;
        else 
            strm_in_end_V_read <= ap_const_logic_0;
        end if; 
    end process;

    strm_out_end_V_din <= grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_out_end_V_din;

    strm_out_end_V_write_assign_proc : process(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_out_end_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            strm_out_end_V_write <= grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_out_end_V_write;
        else 
            strm_out_end_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
