// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_db_insert_sort_function_insert_sort_top_unsigned_int_unsigned_int_4_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        din_strm_V_dout,
        din_strm_V_empty_n,
        din_strm_V_read,
        kin_strm_V_dout,
        kin_strm_V_empty_n,
        kin_strm_V_read,
        strm_in_end_V_dout,
        strm_in_end_V_empty_n,
        strm_in_end_V_read,
        dout_strm_V_din,
        dout_strm_V_full_n,
        dout_strm_V_write,
        kout_strm_V_din,
        kout_strm_V_full_n,
        kout_strm_V_write,
        strm_out_end_V_din,
        strm_out_end_V_full_n,
        strm_out_end_V_write,
        sign
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] din_strm_V_dout;
input   din_strm_V_empty_n;
output   din_strm_V_read;
input  [31:0] kin_strm_V_dout;
input   kin_strm_V_empty_n;
output   kin_strm_V_read;
input  [0:0] strm_in_end_V_dout;
input   strm_in_end_V_empty_n;
output   strm_in_end_V_read;
output  [31:0] dout_strm_V_din;
input   dout_strm_V_full_n;
output   dout_strm_V_write;
output  [31:0] kout_strm_V_din;
input   kout_strm_V_full_n;
output   kout_strm_V_write;
output  [0:0] strm_out_end_V_din;
input   strm_out_end_V_full_n;
output   strm_out_end_V_write;
input   sign;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg din_strm_V_read;
reg kin_strm_V_read;
reg strm_in_end_V_read;
reg dout_strm_V_write;
reg kout_strm_V_write;
reg[0:0] strm_out_end_V_din;
reg strm_out_end_V_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    din_strm_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] and_ln58_reg_797;
reg   [0:0] end_2_reg_159;
reg    kin_strm_V_blk_n;
reg    strm_in_end_V_blk_n;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] and_ln58_fu_229_p2;
reg   [0:0] ap_phi_mux_end_2_phi_fu_162_p4;
reg    dout_strm_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] array_full_reg_194;
reg    kout_strm_V_blk_n;
reg    strm_out_end_V_blk_n;
wire    ap_CS_fsm_state5;
reg    ap_predicate_op35_read_state2;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op40_read_state3;
reg    ap_predicate_op41_read_state3;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] residual_count_reg_169;
reg   [0:0] end_1_reg_181;
reg   [15:0] inserting_id_reg_206;
wire   [0:0] lnot_fu_217_p2;
reg   [0:0] lnot_reg_790;
reg   [0:0] and_ln58_reg_797_pp0_iter1_reg;
wire   [0:0] icmp_ln73_fu_255_p2;
reg   [0:0] icmp_ln73_reg_801;
wire   [0:0] icmp_ln73_1_fu_261_p2;
reg   [0:0] icmp_ln73_1_reg_806;
wire   [0:0] icmp_ln73_2_fu_277_p2;
reg   [0:0] icmp_ln73_2_reg_811;
wire   [0:0] array_full_1_fu_307_p2;
reg   [0:0] array_full_1_reg_816;
wire   [15:0] inserting_id_2_fu_313_p3;
wire   [15:0] residual_count_1_fu_321_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state3;
reg   [15:0] ap_phi_mux_residual_count_phi_fu_173_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_end_1_reg_181;
reg   [0:0] ap_phi_mux_array_full_phi_fu_198_p4;
reg   [31:0] empty_fu_68;
wire   [31:0] select_ln97_4_fu_659_p3;
reg   [31:0] empty_11_fu_72;
wire   [31:0] select_ln97_3_fu_651_p3;
reg   [31:0] in_temp_1_fu_76;
wire   [31:0] select_ln98_5_fu_611_p3;
reg   [31:0] out_temp_fu_80;
wire   [31:0] select_ln98_1_fu_513_p3;
reg   [31:0] out_dtemp_fu_84;
wire   [31:0] select_ln98_fu_489_p3;
reg   [31:0] in_dtemp_1_fu_88;
wire   [31:0] select_ln98_4_fu_587_p3;
reg   [31:0] empty_12_fu_92;
wire   [31:0] select_ln97_2_fu_643_p3;
reg   [31:0] empty_13_fu_96;
wire   [31:0] select_ln97_1_fu_635_p3;
reg   [31:0] empty_14_fu_100;
wire   [31:0] select_ln97_fu_627_p3;
reg   [31:0] in_dtemp_fu_104;
reg   [31:0] in_temp_fu_108;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] lnot_fu_217_p0;
wire   [0:0] icmp_ln58_fu_223_p2;
wire   [14:0] tmp_fu_245_p4;
wire   [13:0] tmp_1_fu_267_p4;
wire   [0:0] icmp_ln124_fu_289_p2;
wire   [0:0] empty_15_fu_301_p2;
wire   [15:0] inserting_id_1_fu_295_p2;
wire   [15:0] residual_count_2_fu_283_p2;
wire   [0:0] icmp_ln74_fu_364_p2;
wire   [0:0] select_ln76_fu_370_p1;
wire   [0:0] select_ln76_fu_370_p3;
wire   [0:0] icmp_ln74_1_fu_381_p2;
wire   [0:0] select_ln76_1_fu_387_p1;
wire   [0:0] select_ln76_1_fu_387_p3;
wire   [0:0] icmp_ln74_2_fu_398_p2;
wire   [0:0] select_ln76_2_fu_404_p1;
wire   [0:0] select_ln76_2_fu_404_p3;
wire   [0:0] or_ln73_2_fu_410_p2;
wire   [0:0] or_ln73_1_fu_393_p2;
wire   [0:0] xor_ln98_fu_453_p2;
wire   [0:0] and_ln98_fu_459_p2;
wire   [31:0] select_ln103_fu_437_p3;
wire   [31:0] select_ln87_fu_415_p3;
wire   [0:0] or_ln97_fu_431_p2;
wire   [31:0] select_ln73_fu_473_p3;
wire   [31:0] select_ln97_5_fu_481_p3;
wire   [31:0] select_ln103_1_fu_445_p3;
wire   [31:0] select_ln87_1_fu_423_p3;
wire   [31:0] select_ln73_1_fu_497_p3;
wire   [31:0] select_ln97_6_fu_505_p3;
wire   [0:0] or_ln73_fu_376_p2;
wire   [31:0] in_dtemp_4_fu_465_p3;
wire   [31:0] in_temp_4_fu_521_p3;
wire   [0:0] xor_ln98_1_fu_551_p2;
wire   [0:0] and_ln98_1_fu_557_p2;
wire   [31:0] select_ln103_2_fu_535_p3;
wire   [0:0] or_ln97_1_fu_529_p2;
wire   [31:0] select_ln73_2_fu_571_p3;
wire   [31:0] select_ln97_7_fu_579_p3;
wire   [31:0] select_ln103_3_fu_543_p3;
wire   [31:0] select_ln73_3_fu_595_p3;
wire   [31:0] select_ln97_8_fu_603_p3;
wire   [31:0] select_ln98_3_fu_563_p3;
wire   [31:0] select_ln98_6_fu_619_p3;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_192;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (strm_in_end_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3)) | (~((ap_start == 1'b0) | (strm_in_end_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_start == 1'b0) | (strm_in_end_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'd0 == and_ln58_reg_797_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        array_full_reg_194 <= array_full_1_reg_816;
    end else if ((~((ap_start == 1'b0) | (strm_in_end_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        array_full_reg_194 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_192)) begin
        if (((ap_phi_mux_end_2_phi_fu_162_p4 == 1'd1) & (1'd0 == and_ln58_fu_229_p2))) begin
            end_1_reg_181 <= 1'd1;
        end else if (((ap_phi_mux_end_2_phi_fu_162_p4 == 1'd0) & (1'd0 == and_ln58_fu_229_p2))) begin
            end_1_reg_181 <= strm_in_end_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            end_1_reg_181 <= ap_phi_reg_pp0_iter0_end_1_reg_181;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln58_reg_797) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        end_2_reg_159 <= end_1_reg_181;
    end else if ((~((ap_start == 1'b0) | (strm_in_end_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        end_2_reg_159 <= strm_in_end_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln58_reg_797) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inserting_id_reg_206 <= inserting_id_2_fu_313_p3;
    end else if ((~((ap_start == 1'b0) | (strm_in_end_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inserting_id_reg_206 <= 16'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln58_reg_797) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        residual_count_reg_169 <= residual_count_1_fu_321_p3;
    end else if ((~((ap_start == 1'b0) | (strm_in_end_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        residual_count_reg_169 <= 16'd5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln58_reg_797 <= and_ln58_fu_229_p2;
        and_ln58_reg_797_pp0_iter1_reg <= and_ln58_reg_797;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln58_reg_797) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        array_full_1_reg_816 <= array_full_1_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_11_fu_72 <= select_ln97_3_fu_651_p3;
        empty_12_fu_92 <= select_ln97_2_fu_643_p3;
        empty_13_fu_96 <= select_ln97_1_fu_635_p3;
        empty_14_fu_100 <= select_ln97_fu_627_p3;
        empty_fu_68 <= select_ln97_4_fu_659_p3;
        in_dtemp_1_fu_88 <= select_ln98_4_fu_587_p3;
        in_temp_1_fu_76 <= select_ln98_5_fu_611_p3;
        out_dtemp_fu_84 <= select_ln98_fu_489_p3;
        out_temp_fu_80 <= select_ln98_1_fu_513_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln58_reg_797) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln73_1_reg_806 <= icmp_ln73_1_fu_261_p2;
        icmp_ln73_2_reg_811 <= icmp_ln73_2_fu_277_p2;
        icmp_ln73_reg_801 <= icmp_ln73_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((end_2_reg_159 == 1'd0) & (1'd0 == and_ln58_reg_797) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_dtemp_fu_104 <= din_strm_V_dout;
        in_temp_fu_108 <= kin_strm_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        lnot_reg_790 <= lnot_fu_217_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln58_fu_229_p2) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((((strm_out_end_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'd0 == and_ln58_reg_797_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_array_full_phi_fu_198_p4 = array_full_1_reg_816;
    end else begin
        ap_phi_mux_array_full_phi_fu_198_p4 = array_full_reg_194;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln58_reg_797) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_end_2_phi_fu_162_p4 = end_1_reg_181;
    end else begin
        ap_phi_mux_end_2_phi_fu_162_p4 = end_2_reg_159;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln58_reg_797) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_residual_count_phi_fu_173_p4 = residual_count_1_fu_321_p3;
    end else begin
        ap_phi_mux_residual_count_phi_fu_173_p4 = residual_count_reg_169;
    end
end

always @ (*) begin
    if (((strm_out_end_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((end_2_reg_159 == 1'd0) & (1'd0 == and_ln58_reg_797) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        din_strm_V_blk_n = din_strm_V_empty_n;
    end else begin
        din_strm_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op41_read_state3 == 1'b1))) begin
        din_strm_V_read = 1'b1;
    end else begin
        din_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((array_full_reg_194 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        dout_strm_V_blk_n = dout_strm_V_full_n;
    end else begin
        dout_strm_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((array_full_reg_194 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dout_strm_V_write = 1'b1;
    end else begin
        dout_strm_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((end_2_reg_159 == 1'd0) & (1'd0 == and_ln58_reg_797) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kin_strm_V_blk_n = kin_strm_V_empty_n;
    end else begin
        kin_strm_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op40_read_state3 == 1'b1))) begin
        kin_strm_V_read = 1'b1;
    end else begin
        kin_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((array_full_reg_194 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        kout_strm_V_blk_n = kout_strm_V_full_n;
    end else begin
        kout_strm_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((array_full_reg_194 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kout_strm_V_write = 1'b1;
    end else begin
        kout_strm_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_phi_mux_end_2_phi_fu_162_p4 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'd0 == and_ln58_fu_229_p2) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        strm_in_end_V_blk_n = strm_in_end_V_empty_n;
    end else begin
        strm_in_end_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op35_read_state2 == 1'b1)) | (~((ap_start == 1'b0) | (strm_in_end_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        strm_in_end_V_read = 1'b1;
    end else begin
        strm_in_end_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((array_full_reg_194 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        strm_out_end_V_blk_n = strm_out_end_V_full_n;
    end else begin
        strm_out_end_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((strm_out_end_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        strm_out_end_V_din = 1'd1;
    end else if (((array_full_reg_194 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        strm_out_end_V_din = 1'd0;
    end else begin
        strm_out_end_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((array_full_reg_194 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((strm_out_end_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        strm_out_end_V_write = 1'b1;
    end else begin
        strm_out_end_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (strm_in_end_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((strm_out_end_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln58_fu_229_p2 = (icmp_ln58_fu_223_p2 & ap_phi_mux_end_2_phi_fu_162_p4);

assign and_ln98_1_fu_557_p2 = (xor_ln98_1_fu_551_p2 & or_ln73_1_fu_393_p2);

assign and_ln98_fu_459_p2 = (xor_ln98_fu_453_p2 & or_ln73_2_fu_410_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((array_full_reg_194 == 1'd1) & (strm_out_end_V_full_n == 1'b0)) | ((array_full_reg_194 == 1'd1) & (dout_strm_V_full_n == 1'b0)) | ((array_full_reg_194 == 1'd1) & (kout_strm_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (strm_in_end_V_empty_n == 1'b0) & (ap_predicate_op35_read_state2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((din_strm_V_empty_n == 1'b0) & (ap_predicate_op41_read_state3 == 1'b1)) | ((kin_strm_V_empty_n == 1'b0) & (ap_predicate_op40_read_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((array_full_reg_194 == 1'd1) & (strm_out_end_V_full_n == 1'b0)) | ((array_full_reg_194 == 1'd1) & (dout_strm_V_full_n == 1'b0)) | ((array_full_reg_194 == 1'd1) & (kout_strm_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (strm_in_end_V_empty_n == 1'b0) & (ap_predicate_op35_read_state2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((din_strm_V_empty_n == 1'b0) & (ap_predicate_op41_read_state3 == 1'b1)) | ((kin_strm_V_empty_n == 1'b0) & (ap_predicate_op40_read_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((array_full_reg_194 == 1'd1) & (strm_out_end_V_full_n == 1'b0)) | ((array_full_reg_194 == 1'd1) & (dout_strm_V_full_n == 1'b0)) | ((array_full_reg_194 == 1'd1) & (kout_strm_V_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (strm_in_end_V_empty_n == 1'b0) & (ap_predicate_op35_read_state2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((din_strm_V_empty_n == 1'b0) & (ap_predicate_op41_read_state3 == 1'b1)) | ((kin_strm_V_empty_n == 1'b0) & (ap_predicate_op40_read_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (strm_in_end_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((strm_in_end_V_empty_n == 1'b0) & (ap_predicate_op35_read_state2 == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((din_strm_V_empty_n == 1'b0) & (ap_predicate_op41_read_state3 == 1'b1)) | ((kin_strm_V_empty_n == 1'b0) & (ap_predicate_op40_read_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = (((array_full_reg_194 == 1'd1) & (strm_out_end_V_full_n == 1'b0)) | ((array_full_reg_194 == 1'd1) & (dout_strm_V_full_n == 1'b0)) | ((array_full_reg_194 == 1'd1) & (kout_strm_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_192 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_end_1_reg_181 = 'bx;

always @ (*) begin
    ap_predicate_op35_read_state2 = ((ap_phi_mux_end_2_phi_fu_162_p4 == 1'd0) & (1'd0 == and_ln58_fu_229_p2));
end

always @ (*) begin
    ap_predicate_op40_read_state3 = ((end_2_reg_159 == 1'd0) & (1'd0 == and_ln58_reg_797));
end

always @ (*) begin
    ap_predicate_op41_read_state3 = ((end_2_reg_159 == 1'd0) & (1'd0 == and_ln58_reg_797));
end

assign array_full_1_fu_307_p2 = (empty_15_fu_301_p2 | ap_phi_mux_array_full_phi_fu_198_p4);

assign dout_strm_V_din = out_dtemp_fu_84;

assign empty_15_fu_301_p2 = (icmp_ln124_fu_289_p2 | end_1_reg_181);

assign icmp_ln124_fu_289_p2 = ((inserting_id_reg_206 == 16'd4) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_223_p2 = ((ap_phi_mux_residual_count_phi_fu_173_p4 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln73_1_fu_261_p2 = ((inserting_id_reg_206 < 16'd3) ? 1'b1 : 1'b0);

assign icmp_ln73_2_fu_277_p2 = ((tmp_1_fu_267_p4 == 14'd0) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_255_p2 = ((tmp_fu_245_p4 == 15'd0) ? 1'b1 : 1'b0);

assign icmp_ln74_1_fu_381_p2 = ((empty_11_fu_72 < in_temp_fu_108) ? 1'b1 : 1'b0);

assign icmp_ln74_2_fu_398_p2 = ((in_temp_1_fu_76 < in_temp_fu_108) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_364_p2 = ((empty_fu_68 < in_temp_fu_108) ? 1'b1 : 1'b0);

assign in_dtemp_4_fu_465_p3 = ((and_ln98_fu_459_p2[0:0] == 1'b1) ? in_dtemp_fu_104 : in_dtemp_1_fu_88);

assign in_temp_4_fu_521_p3 = ((and_ln98_fu_459_p2[0:0] == 1'b1) ? in_temp_fu_108 : in_temp_1_fu_76);

assign inserting_id_1_fu_295_p2 = (inserting_id_reg_206 + 16'd1);

assign inserting_id_2_fu_313_p3 = ((empty_15_fu_301_p2[0:0] == 1'b1) ? 16'd1 : inserting_id_1_fu_295_p2);

assign kout_strm_V_din = out_temp_fu_80;

assign lnot_fu_217_p0 = sign;

assign lnot_fu_217_p2 = (lnot_fu_217_p0 ^ 1'd1);

assign or_ln73_1_fu_393_p2 = (select_ln76_1_fu_387_p3 | icmp_ln73_1_reg_806);

assign or_ln73_2_fu_410_p2 = (select_ln76_2_fu_404_p3 | icmp_ln73_2_reg_811);

assign or_ln73_fu_376_p2 = (select_ln76_fu_370_p3 | icmp_ln73_reg_801);

assign or_ln97_1_fu_529_p2 = (or_ln73_fu_376_p2 | or_ln73_1_fu_393_p2);

assign or_ln97_fu_431_p2 = (or_ln73_2_fu_410_p2 | or_ln73_1_fu_393_p2);

assign residual_count_1_fu_321_p3 = ((end_1_reg_181[0:0] == 1'b1) ? residual_count_2_fu_283_p2 : residual_count_reg_169);

assign residual_count_2_fu_283_p2 = ($signed(residual_count_reg_169) + $signed(16'd65535));

assign select_ln103_1_fu_445_p3 = ((or_ln73_2_fu_410_p2[0:0] == 1'b1) ? in_temp_1_fu_76 : in_temp_fu_108);

assign select_ln103_2_fu_535_p3 = ((or_ln73_1_fu_393_p2[0:0] == 1'b1) ? empty_12_fu_92 : in_dtemp_4_fu_465_p3);

assign select_ln103_3_fu_543_p3 = ((or_ln73_1_fu_393_p2[0:0] == 1'b1) ? empty_11_fu_72 : in_temp_4_fu_521_p3);

assign select_ln103_fu_437_p3 = ((or_ln73_2_fu_410_p2[0:0] == 1'b1) ? in_dtemp_1_fu_88 : in_dtemp_fu_104);

assign select_ln73_1_fu_497_p3 = ((or_ln73_1_fu_393_p2[0:0] == 1'b1) ? select_ln103_1_fu_445_p3 : select_ln87_1_fu_423_p3);

assign select_ln73_2_fu_571_p3 = ((or_ln73_fu_376_p2[0:0] == 1'b1) ? select_ln103_2_fu_535_p3 : in_dtemp_4_fu_465_p3);

assign select_ln73_3_fu_595_p3 = ((or_ln73_fu_376_p2[0:0] == 1'b1) ? select_ln103_3_fu_543_p3 : in_temp_4_fu_521_p3);

assign select_ln73_fu_473_p3 = ((or_ln73_1_fu_393_p2[0:0] == 1'b1) ? select_ln103_fu_437_p3 : select_ln87_fu_415_p3);

assign select_ln76_1_fu_387_p1 = sign;

assign select_ln76_1_fu_387_p3 = ((icmp_ln74_1_fu_381_p2[0:0] == 1'b1) ? select_ln76_1_fu_387_p1 : lnot_reg_790);

assign select_ln76_2_fu_404_p1 = sign;

assign select_ln76_2_fu_404_p3 = ((icmp_ln74_2_fu_398_p2[0:0] == 1'b1) ? select_ln76_2_fu_404_p1 : lnot_reg_790);

assign select_ln76_fu_370_p1 = sign;

assign select_ln76_fu_370_p3 = ((icmp_ln74_fu_364_p2[0:0] == 1'b1) ? select_ln76_fu_370_p1 : lnot_reg_790);

assign select_ln87_1_fu_423_p3 = ((or_ln73_2_fu_410_p2[0:0] == 1'b1) ? out_temp_fu_80 : in_temp_fu_108);

assign select_ln87_fu_415_p3 = ((or_ln73_2_fu_410_p2[0:0] == 1'b1) ? out_dtemp_fu_84 : in_dtemp_fu_104);

assign select_ln97_1_fu_635_p3 = ((or_ln73_fu_376_p2[0:0] == 1'b1) ? in_temp_fu_108 : empty_13_fu_96);

assign select_ln97_2_fu_643_p3 = ((or_ln73_fu_376_p2[0:0] == 1'b1) ? empty_14_fu_100 : select_ln98_3_fu_563_p3);

assign select_ln97_3_fu_651_p3 = ((or_ln73_fu_376_p2[0:0] == 1'b1) ? empty_13_fu_96 : select_ln98_6_fu_619_p3);

assign select_ln97_4_fu_659_p3 = ((or_ln73_fu_376_p2[0:0] == 1'b1) ? in_temp_fu_108 : empty_fu_68);

assign select_ln97_5_fu_481_p3 = ((or_ln97_fu_431_p2[0:0] == 1'b1) ? select_ln73_fu_473_p3 : select_ln87_fu_415_p3);

assign select_ln97_6_fu_505_p3 = ((or_ln97_fu_431_p2[0:0] == 1'b1) ? select_ln73_1_fu_497_p3 : select_ln87_1_fu_423_p3);

assign select_ln97_7_fu_579_p3 = ((or_ln97_1_fu_529_p2[0:0] == 1'b1) ? select_ln73_2_fu_571_p3 : in_dtemp_4_fu_465_p3);

assign select_ln97_8_fu_603_p3 = ((or_ln97_1_fu_529_p2[0:0] == 1'b1) ? select_ln73_3_fu_595_p3 : in_temp_4_fu_521_p3);

assign select_ln97_fu_627_p3 = ((or_ln73_fu_376_p2[0:0] == 1'b1) ? in_dtemp_fu_104 : empty_14_fu_100);

assign select_ln98_1_fu_513_p3 = ((and_ln98_fu_459_p2[0:0] == 1'b1) ? in_temp_1_fu_76 : select_ln97_6_fu_505_p3);

assign select_ln98_3_fu_563_p3 = ((and_ln98_1_fu_557_p2[0:0] == 1'b1) ? in_dtemp_fu_104 : empty_12_fu_92);

assign select_ln98_4_fu_587_p3 = ((and_ln98_1_fu_557_p2[0:0] == 1'b1) ? empty_12_fu_92 : select_ln97_7_fu_579_p3);

assign select_ln98_5_fu_611_p3 = ((and_ln98_1_fu_557_p2[0:0] == 1'b1) ? empty_11_fu_72 : select_ln97_8_fu_603_p3);

assign select_ln98_6_fu_619_p3 = ((and_ln98_1_fu_557_p2[0:0] == 1'b1) ? in_temp_fu_108 : empty_11_fu_72);

assign select_ln98_fu_489_p3 = ((and_ln98_fu_459_p2[0:0] == 1'b1) ? in_dtemp_1_fu_88 : select_ln97_5_fu_481_p3);

assign tmp_1_fu_267_p4 = {{inserting_id_reg_206[15:2]}};

assign tmp_fu_245_p4 = {{inserting_id_reg_206[15:1]}};

assign xor_ln98_1_fu_551_p2 = (or_ln73_fu_376_p2 ^ 1'd1);

assign xor_ln98_fu_453_p2 = (or_ln73_1_fu_393_p2 ^ 1'd1);

endmodule //hls_db_insert_sort_function_insert_sort_top_unsigned_int_unsigned_int_4_s
