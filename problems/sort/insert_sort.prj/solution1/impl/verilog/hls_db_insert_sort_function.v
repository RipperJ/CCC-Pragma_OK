// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_db_insert_sort_function_hls_db_insert_sort_function,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.013450,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=403,HLS_SYN_LUT=1371,HLS_VERSION=2020_2}" *)

module hls_db_insert_sort_function (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        din_strm_V_dout,
        din_strm_V_empty_n,
        din_strm_V_read,
        kin_strm_V_dout,
        kin_strm_V_empty_n,
        kin_strm_V_read,
        strm_in_end_V_dout,
        strm_in_end_V_empty_n,
        strm_in_end_V_read,
        dout_strm_V_din,
        dout_strm_V_full_n,
        dout_strm_V_write,
        kout_strm_V_din,
        kout_strm_V_full_n,
        kout_strm_V_write,
        strm_out_end_V_din,
        strm_out_end_V_full_n,
        strm_out_end_V_write,
        sign
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] din_strm_V_dout;
input   din_strm_V_empty_n;
output   din_strm_V_read;
input  [31:0] kin_strm_V_dout;
input   kin_strm_V_empty_n;
output   kin_strm_V_read;
input  [0:0] strm_in_end_V_dout;
input   strm_in_end_V_empty_n;
output   strm_in_end_V_read;
output  [31:0] dout_strm_V_din;
input   dout_strm_V_full_n;
output   dout_strm_V_write;
output  [31:0] kout_strm_V_din;
input   kout_strm_V_full_n;
output   kout_strm_V_write;
output  [0:0] strm_out_end_V_din;
input   strm_out_end_V_full_n;
output   strm_out_end_V_write;
input   sign;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg din_strm_V_read;
reg kin_strm_V_read;
reg strm_in_end_V_read;
reg dout_strm_V_write;
reg kout_strm_V_write;
reg strm_out_end_V_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start;
wire    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_done;
wire    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_idle;
wire    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_ready;
wire    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_din_strm_V_read;
wire    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kin_strm_V_read;
wire    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_in_end_V_read;
wire   [31:0] grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_dout_strm_V_din;
wire    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_dout_strm_V_write;
wire   [31:0] grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kout_strm_V_din;
wire    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kout_strm_V_write;
wire   [0:0] grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_out_end_V_din;
wire    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_out_end_V_write;
reg    grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start_reg = 1'b0;
end

hls_db_insert_sort_function_insert_sort_top_unsigned_int_unsigned_int_4_s grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start),
    .ap_done(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_done),
    .ap_idle(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_idle),
    .ap_ready(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_ready),
    .din_strm_V_dout(din_strm_V_dout),
    .din_strm_V_empty_n(din_strm_V_empty_n),
    .din_strm_V_read(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_din_strm_V_read),
    .kin_strm_V_dout(kin_strm_V_dout),
    .kin_strm_V_empty_n(kin_strm_V_empty_n),
    .kin_strm_V_read(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kin_strm_V_read),
    .strm_in_end_V_dout(strm_in_end_V_dout),
    .strm_in_end_V_empty_n(strm_in_end_V_empty_n),
    .strm_in_end_V_read(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_in_end_V_read),
    .dout_strm_V_din(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_dout_strm_V_din),
    .dout_strm_V_full_n(dout_strm_V_full_n),
    .dout_strm_V_write(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_dout_strm_V_write),
    .kout_strm_V_din(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kout_strm_V_din),
    .kout_strm_V_full_n(kout_strm_V_full_n),
    .kout_strm_V_write(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kout_strm_V_write),
    .strm_out_end_V_din(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_out_end_V_din),
    .strm_out_end_V_full_n(strm_out_end_V_full_n),
    .strm_out_end_V_write(grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_out_end_V_write),
    .sign(sign)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start_reg <= 1'b1;
        end else if ((grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_ready == 1'b1)) begin
            grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        din_strm_V_read = grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_din_strm_V_read;
    end else begin
        din_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dout_strm_V_write = grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_dout_strm_V_write;
    end else begin
        dout_strm_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kin_strm_V_read = grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kin_strm_V_read;
    end else begin
        kin_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kout_strm_V_write = grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kout_strm_V_write;
    end else begin
        kout_strm_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        strm_in_end_V_read = grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_in_end_V_read;
    end else begin
        strm_in_end_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        strm_out_end_V_write = grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_out_end_V_write;
    end else begin
        strm_out_end_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign dout_strm_V_din = grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_dout_strm_V_din;

assign grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start = grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_ap_start_reg;

assign kout_strm_V_din = grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_kout_strm_V_din;

assign strm_out_end_V_din = grp_insert_sort_top_unsigned_int_unsigned_int_4_s_fu_40_strm_out_end_V_din;

endmodule //hls_db_insert_sort_function
